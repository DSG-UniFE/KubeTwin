start_time DateTime.civil(2013,1,18,0,0,0).to_time
warmup_duration 10.seconds
duration 1.minute


data_centers \
  one: {
    name: "ACME large data center",
    # maximum_vm_capacity: {
    #   medium: 50_000,
    #   large: 50_000,
    # },
    location_id: 0,
    type: :public,
  },
  two: {
    name: "ACME small data center",
    # maximum_vm_capacity: {
    #   medium: 50_000,
    #   large: 50_000,
    # },
    location_id: 1,
    type: :public,
  }

latency_models \
  [
    # location 0
    [
      {
        distribution: :gaussian,
        args:  {
          mean:         0.009,
          sd:           0.001
        },
      },
      {
        distribution: :gaussian,
        args:  {
          mean:         0.009,
          sd:           0.001
        },
      },
    ],
    # location 1
    [
      {
        distribution: :gaussian,
        args:  {
          mean:         0.009,
          sd:           0.001
        },
      },
    ],
  ]


customers \
  1 => { location_id: 1 }
  # first and only customer (id: 0) is in location with id=1


service_component_types \
  'Web Server' => {
    allowed_vm_types: [ :medium ],
    service_time_distribution: {
      # 1 request processed every 9ms
      medium: { distribution: :gaussian, args: { mean: 0.009, sd: 0.001 } },
    },
    # estimated_workload: 50,
  },
  'App Server' => {
    allowed_vm_types: [ :large ],
    service_time_distribution: {
      # 1 request processed every 12ms
      large: { distribution: :gaussian, args: { mean: 0.012, sd: 0.002 } },
    },
    # estimated_workload: 70,
  }


# workflow (or job) types descriptions
workflow_types \
  1 => {
    component_sequence: [
      { name: 'Web Server' }, # no need for type: dedicated / shared
      { name: 'App Server' },
    ],
    next_component_selection: :random,
  }


constraints \
  'Web Server' => [
    { data_center: 1, min: 0, max: 300 },
    { data_center: 2, min: 0, max: 300 },
  ],
  'App Server' => [
    { data_center: 1, min: 0, max: 300 },
    { data_center: 2, min: 0, max: 300 },
  ]


# input request source (the generator.R script)
request_generation \
  filename: '<pwd>/results.csv'
  # command: '<pwd>/generator.R'


# evaluation model
evaluation \
  vm_hourly_cost: [
    { data_center: :one, vm_type: :medium, cost: 0.160 },
    { data_center: :one, vm_type: :large,  cost: 0.320 },
    { data_center: :two, vm_type: :medium, cost: 0.184 },
    { data_center: :two, vm_type: :large,  cost: 0.368 }
  ],
  penalties: lambda {|general_stats, per_workflow_and_customer_stats|
    # 500$ penalties if MTTR takes more than 50 msecs
    500.0 if general_stats.mean > 0.050
  }


# vim: filetype=ruby
