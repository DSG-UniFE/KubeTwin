start_time DateTime.civil(2020,5,28,0,0,0).to_time
warmup_duration 0.seconds
cooldown_duration 0.seconds

duration 10000.seconds
seeds \
  {communication_latencies 12345}
#stats_print_interval 1

seed 12345

clusters \
  one: {
    name: "eu-south-1 - Local DC",
    location_id: 1,
    type: :mec,
    tier: "local",
    node_number: 1, 
    node_resources_cpu: 10000, 
    node_resources_memory: 10000,
  }


latency_models \
  [
    # 0 end-user location
    [
      # 0 0 -- end-user end-user (not-used)
      {
        distribution: :gaussian, args: {mean: 0.100E-10, sd: 0.50E-10, seed: seed}
      },
      {
        distribution: :gaussian, args: {mean: 0.100E-10, sd: 0.50E-10, seed: seed}
        #distribution: :gaussian, args: {mean: 0.1E-3, sd: 0.3E-4, seed: seed}
      }
    ],
    # 1 location
    [
      # location 1 - 1 
      # these are intra-dc (for node in the same cluster)
      # 0 1 -- end-user- cluster (use )
      {
        #distribution: :gaussian, args: {mean: 0.100E-10, sd: 0.50E-10, seed: seed}
        distribution: :gaussian, args: {mean: 0.1E-6, sd: 0.3E-7, seed: seed}
      }
      #{
      #  distribution: :mixture,
      #  args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
      #    33, 9.24E-6, 1.69E-6, 33, 10.87E-6, 1.73E-6, 33, 11.19E-6, 1.40E-6), seed: seed
      #}
    ]
  ]


# MEC location is 1

# customers located at Local DC -- downtown 

customers \
  1 => { location_id: 0 }

=begin
request_gen \
1 => {
  workflow_types: 1,
  # request_distribution: {distribution: :exponential, args: { rate: 1 / 0.03766478342749529, seed: seed }},
  request_distribution: {distribution: :exponential, args: { rate: 0.5, seed: seed }},
  num_requests: 2000,
  num_customers: 1
}
=end

request_generation \
  filename: '/Users/filippo/Downloads/kt-measure/threaded-mode/req_logs_1663822993.7852924_rps20.0_nreq5000.csv'
# filename: '/Users/filippo/Downloads/measures_with_replicas/replica1/r1_c5.csv'
# filename: '/Users/filippo/Downloads/measures_with_replicas/replica1/r1_c5.csv'


# all microservices have an equal service time for mec or cloud resources
# generated from workstation
microservice_types \
"MS1"=>{:service_time_distribution=>{:mec=>{:distribution=>:mixture, :args=>[{:distribution=>:gaussian, :weight=>1.5559918805546257e-06, :args=>{:mean=>0.02364657547134185, :sd=>0.00011088479895506781, :seed=>12345}}, {:distribution=>:gaussian, :weight=>0.0002479463056084313, :args=>{:mean=>0.0128335527127036, :sd=>0.0029212949417446944, :seed=>12345}}, {:distribution=>:gaussian, :weight=>9.02857626051799e-05, :args=>{:mean=>0.006568450644341784, :sd=>0.0001001959414638289, :seed=>12345}}]}, :cloud=>{:distribution=>:gaussian, :args=>{:mean=>0.053011, :sd=>0.006149, :seed=>12345}}}, :resources_requirements_cpu=>30, :resources_requirements_memory=>25, :node_affinity=>"local", :wait_for=>["MS2"]}, 
"MS2"=>{:service_time_distribution=>{:mec=>{:distribution=>:mixture, :args=>[{:distribution=>:gaussian, :weight=>1.5063164190206628e-07, :args=>{:mean=>0.005686473265417728, :sd=>0.0001, :seed=>12345}}, {:distribution=>:gaussian, :weight=>1.3532036677214573e-07, :args=>{:mean=>0.0009800664642672986, :sd=>0.002085403097733778, :seed=>12345}}, {:distribution=>:gaussian, :weight=>0.004992552471047289, :args=>{:mean=>0.033279467937050985, :sd=>0.005000409142536344, :seed=>12345}}]}, :cloud=>{:distribution=>:gaussian, :args=>{:mean=>0.053011, :sd=>0.006149, :seed=>12345}}}, :resources_requirements_cpu=>30, :resources_requirements_memory=>25, :node_affinity=>"local"}
=begin
"MS1"=>{:service_time_distribution=>
{:mec=> {distribution: :gaussian, args: {mean: 0.01043614, sd: 0.003343094, seed: seed}},
 :cloud=>{:distribution=>:gaussian, :args=>{:mean=>0.053011, :sd=>0.006149, :seed=>12345}}},
:resources_requirements_cpu=>30, :resources_requirements_memory=>25, :node_affinity=>"local", :wait_for => ["MS2"]}, 
"MS2"=>{:service_time_distribution=>
{:mec=>{distribution: :gaussian, args: {mean: 0.03208513, sd: 0.004976145, seed: seed}},
 :cloud=>{:distribution=>:gaussian, :args=>{:mean=>0.053011, :sd=>0.006149, :seed=>12345}}}, :resources_requirements_cpu=>30, :resources_requirements_memory=>25, :node_affinity=>"local"}
=begin
"MS1"=>{:service_time_distribution=>{:mec=>{:distribution=>:mixture, :args=>[{:distribution=>:gaussian, :weight=>1.5559918805546257e-06, :args=>{:mean=>0.02364657547134185, :sd=>0.00011088479895506781, :seed=>12345}}, {:distribution=>:gaussian, :weight=>0.0002479463056084313, :args=>{:mean=>0.0128335527127036, :sd=>0.0029212949417446944, :seed=>12345}}, {:distribution=>:gaussian, :weight=>9.02857626051799e-05, :args=>{:mean=>0.006568450644341784, :sd=>0.0001001959414638289, :seed=>12345}}]}, :cloud=>{:distribution=>:gaussian, :args=>{:mean=>0.053011, :sd=>0.006149, :seed=>12345}}}, :resources_requirements_cpu=>30, :resources_requirements_memory=>25, :node_affinity=>"local", :wait_for=>["MS2"]}, 
"MS2"=>{:service_time_distribution=>{:mec=>{:distribution=>:mixture, :args=>[{:distribution=>:gaussian, :weight=>1.5063164190206628e-07, :args=>{:mean=>0.005686473265417728, :sd=>0.0001, :seed=>12345}}, {:distribution=>:gaussian, :weight=>1.3532036677214573e-07, :args=>{:mean=>0.0009800664642672986, :sd=>0.002085403097733778, :seed=>12345}}, {:distribution=>:gaussian, :weight=>0.004992552471047289, :args=>{:mean=>0.033279467937050985, :sd=>0.005000409142536344, :seed=>12345}}]}, :cloud=>{:distribution=>:gaussian, :args=>{:mean=>0.053011, :sd=>0.006149, :seed=>12345}}}, :resources_requirements_cpu=>30, :resources_requirements_memory=>25, :node_affinity=>"local"}
=begin
"MS1"=>{:service_time_distribution=>
{:mec=> {distribution: :gaussian, args: {mean: 0.01043614, sd: 0.003343094, seed: seed}},
 :cloud=>{:distribution=>:gaussian, :args=>{:mean=>0.053011, :sd=>0.006149, :seed=>12345}}},
:resources_requirements_cpu=>30, :resources_requirements_memory=>25, :node_affinity=>"local", :wait_for => ["MS2"]}, 
"MS2"=>{:service_time_distribution=>
{:mec=>{distribution: :gaussian, args: {mean: 0.03208513, sd: 0.004976145, seed: seed}},
 :cloud=>{:distribution=>:gaussian, :args=>{:mean=>0.053011, :sd=>0.006149, :seed=>12345}}}, :resources_requirements_cpu=>30, :resources_requirements_memory=>25, :node_affinity=>"local"}
=begin
"MS1"=>{:service_time_distribution=>
{:mec=> {distribution: :gaussian, args: {mean: 0.01143607, sd: 0.00301789, seed: seed}},
 :cloud=>{:distribution=>:gaussian, :args=>{:mean=>0.053011, :sd=>0.006149, :seed=>12345}}},
:resources_requirements_cpu=>30, :resources_requirements_memory=>25, :node_affinity=>"local", :wait_for => ["MS2"]}, 
"MS2"=>{:service_time_distribution=>
{:mec=>{distribution: :gaussian, args: {mean: 0.03074308, sd: 0.004740396, seed: seed}},
 :cloud=>{:distribution=>:gaussian, :args=>{:mean=>0.053011, :sd=>0.006149, :seed=>12345}}}, :resources_requirements_cpu=>30, :resources_requirements_memory=>25, :node_affinity=>"local"}
=begin
"MS1"=>{:service_time_distribution=>{:mec=>{:distribution=>:mixture, :args=>[{:distribution=>:gaussian, :weight=>9.811598858779944e-05, :args=>{:mean=>0.007160269823213679, :sd=>0.0063682261762834785, :seed=>12345}}, {:distribution=>:gaussian, :weight=>9.306571809554428e-05, :args=>{:mean=>0.02227133015322898, :sd=>0.03717479609753065, :seed=>12345}}, {:distribution=>:gaussian, :weight=>0.010839739645328157, :args=>{:mean=>0.005012309274568196, :sd=>0.011037426320116384, :seed=>12345}}]}, :cloud=>{:distribution=>:gaussian, :args=>{:mean=>0.053011, :sd=>0.006149, :seed=>12345}}}, 
:resources_requirements_cpu=>30, 
:resources_requirements_memory=>25, 
:wait_for => ["MS2"],
:node_affinity=>"local"},
"MS2"=>{:service_time_distribution=>{:mec=>{:distribution=>:mixture, 
:args=>[{:distribution=>:gaussian, :weight=>0.0013544096931170592, :args=>{:mean=>0.006910477307608723, :sd=>0.0036099000885854195, :seed=>12345}}, {:distribution=>:gaussian, :weight=>0.0020905812130319374, :args=>{:mean=>0.016116386025725384, :sd=>0.11568954739239289, :seed=>12345}}, {:distribution=>:gaussian, :weight=>0.0051558487990229825, :args=>{:mean=>0.004718772854840048, :sd=>0.008497677046634683, :seed=>12345}}]}, :cloud=>{:distribution=>:gaussian, :args=>{:mean=>0.053011, :sd=>0.006149, :seed=>12345}}}, :resources_requirements_cpu=>30, :resources_requirements_memory=>25, :node_affinity=>"local"}
=end

services \
  'MS1' => {
    serviceName: 'Service1',
    selector: 'MS1'
  },
  'MS2' => {
    serviceName: 'Service2',
    selector: 'MS2'
  }

replica_sets \
  'app' => {
      name: 'rs_1',
      selector: 'MS1',
      replicas: 1,
  },
  'app2' => {
      name: 'rs_2',
      selector: 'MS2',
      replicas: 1,
  }


workflow_types \
  1 => {
    component_sequence: [
      { name: 'MS1' }, 
      { name: 'MS2' },
    ],
  }

# just an example of a custom stats here ---
# so we can collect the data for the Experimental Result
# section

custom_stats \
  [
    { workflow_type_id: 1, customer_id: 1, longer_than: [35.msecs, 45.msecs, 50.msecs, 55.msecs, 60.msecs, 65.msecs] },
  ]

evaluation \
  cluster_hourly_cost: [
    { cluster: :one, fixed_cpu_hourly_cost: 0.100, fixed_memory_hourly_cost: 0.100 },
    { cluster: :two, fixed_cpu_hourly_cost: 0.300, fixed_memory_hourly_cost: 0.250 },
    { cluster: :three, fixed_cpu_hourly_cost: 0.300, fixed_memory_hourly_cost: 0.315 },
    { cluster: :four, fixed_cpu_hourly_cost: 0.500, fixed_memory_hourly_cost: 0.315 },
    { cluster: :five, fixed_cpu_hourly_cost: 0.500, fixed_memory_hourly_cost: 0.315 },
    { cluster: :six, fixed_cpu_hourly_cost: 0.600, fixed_memory_hourly_cost: 0.315 },
    { cluster: :seven, fixed_cpu_hourly_cost: 0.600, fixed_memory_hourly_cost: 0.315 },
  ],

  penalties: lambda {|general_stats, per_workflow_and_customer_stats|
    # 500$ penalties if MTTR takes more than 50 msecs
    500.0 if general_stats.mean > 0.500
  }
