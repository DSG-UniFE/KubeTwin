start_time DateTime.civil(2020,5,28,0,0,0).to_time
warmup_duration 10.seconds
cooldown_duration 10.seconds

duration 100_000.seconds

seeds \
  {communication_latencies 12345}

stats_print_interval 1

seed 12345
clusters \
  one: {
    name: "eu-south-1 - Local DC",
    location_id: 1,
    type: :mec,
    tier: "local",
    node_number: 5, 
    node_resources_cpu: 100, 
    node_resources_memory: 100,
  },
  two: {
    name: "eu-central-1 Tier 1 Regional Edge",
    location_id: 2,
    type: :mec,
    node_number: 5, 
    tier: "t1",
    node_resources_cpu: 100, 
    node_resources_memory: 100,
  },
  three: {
    name: "eu-west-3 Tier 1",
    location_id: 3,
    type: :mec,
    node_number: 5, 
    tier: "t1",
    node_resources_cpu: 100, 
    node_resources_memory: 100,
  },
  four: {
    name: "eu-west-2 Tier 2",
    location_id: 4,
    type: :mec,
    node_number: 5, 
    tier: "t2",
    node_resources_cpu: 100, 
    node_resources_memory: 100,
  },
  five: {
    name: "eu-north-1 - Tier 2",
    location_id: 5,
    type: :mec,
    node_number: 5, 
    tier: "t2",
    node_resources_cpu: 100, 
    node_resources_memory: 100,
  },
  six: {
    name: "ca-central-1 - Remote DC",
    location_id: 6,
    type: :cloud,
    node_number: 5, 
    tier: "rdc",
    node_resources_cpu: 200, 
    node_resources_memory: 200,
  },
  seven: {
    name: "us-east-1 - Remote DC",
    location_id: 7,
    type: :cloud,
    node_number: 5, 
    tier: "rdc",
    node_resources_cpu: 200, 
    node_resources_memory: 200,
  }

latency_models \
  [
    # 0 end-user location
    [
      # 0 0 -- end-user end-user (not used)
      {
        distribution: :gaussian,
        args:  {
          mean:         0.00301,
          sd:           0.00142
        },
      },
      # 0 1 -- end-user- eu-south-1
      {
        distribution: :mixture,
        args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
          33, 9.24E-6, 1.69E-6, 33, 10.87E-6, 1.73E-6, 33, 11.19E-6, 1.40E-6)
      },
      # 0 2 end-user - eu-central-1
      {
        distribution: :gaussian,
        args:  {
          mean:         0.0126,
          sd:           0.00582
        },
      },
      # 0 3 end-user - eu-west-3
      {
        distribution: :gaussian,
        args:  {
          mean:         0.01980,
          sd:           0.00195
        },
      },
      # 0 4 end-user - eu-west-2
      {
        distribution: :gaussian,
        args:  {
          mean:         0.02658,
          sd:           0.00205
        },
      },
      # 0 5 end-user - eu-north-1
      {
        distribution: :gaussian,
        args:  {
          mean:         0.03228,
          sd:           0.00643
        },
      },
      # 0 6 end-user - ca-central-1
      {
        distribution: :gaussian,
        args:  {
          mean:         0.10455,
          sd:           0.00673
        },
      },
      # 0 7 end-user - us-east-1
      {
        distribution: :gaussian,
        args:  {
          mean:         0.10013,
          sd:           0.00189
        },
      },
    ],
    # 1
    [
      # 1 1 -- eu-south-1 - eu-south-1 (intra)
      {
        distribution: :mixture,
        args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
          33, 9.24E-6, 1.69E-6, 33, 10.87E-6, 1.73E-6, 33, 11.19E-6, 1.40E-6)
      },
      # 1 2 eu-south-1 - eu-central-1
      {
        distribution: :gaussian,
        args:  {
          mean:         0.01260,
          sd:           0.00582
        },
      },
      # 1 3 eu-south-1 - eu-west-3
      {
        distribution: :gaussian,
        args:  {
          mean:         0.01980,
          sd:           0.00195
        },
      },
      # 1 4 eu-south-1 - eu-west-2
      {
        distribution: :gaussian,
        args:  {
          mean:         0.02658,
          sd:           0.00205
        },
      },
      # 1 5 eu-south-1 - eu-north-1
      {
        distribution: :gaussian,
        args:  {
          mean:         0.03228,
          sd:           0.00643
        },
      },
      # 1 6 eu-south-1 - ca-central-1
      {
        distribution: :gaussian,
        args:  {
          mean:         0.10455,
          sd:           0.00673
        },
      },
      # 1 7 eu-south-1 - us-east-1
      {
        distribution: :gaussian,
        args:  {
          mean:         0.10013,
          sd:           0.00189
        },
      },
    ],
    # location :2
    [
      #  2 2 eu-central-1 - eu-central-1 (intra)
      {
        distribution: :mixture,
        args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
          33, 9.24E-6, 1.69E-6, 33, 10.87E-6, 1.73E-6, 33, 11.19E-6, 1.40E-6)
      },
      # 2 3 eu-central-1 - eu-west-3
      {
        distribution: :gaussian,
        args:  {
          mean:         0.01053,
          sd:           0.00213
        },
      },
      # 2 4 eu-central-1 - eu-west-2
      {
        distribution: :gaussian,
        args:  {
          mean:         0.01634,
          sd:           0.00182
        },
      },
      # 2 5 eu-central-1 - eu-north-1
      {
        distribution: :gaussian,
        args:  {
          mean:         0.02316,
          sd:           0.00318
        },
      },
      # 2 6 eu-central-1 - ca-central-1
      {
        distribution: :gaussian,
        args:  {
          mean:         0.09461,
          sd:           0.00646
        },
      },
      # 2 7 eu-central-1 - us-east-1
      {
        distribution: :gaussian,
        args:  {
          mean:         0.09108,
          sd:           0.00205
        },
      },
    ],
    # location 3
    [
      # 3 3 eu-west-3 - eu-west-3 (intra)
      {
        distribution: :mixture,
        args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
          33, 9.24E-6, 1.69E-6, 33, 10.87E-6, 1.73E-6, 33, 11.19E-6, 1.40E-6)
      },
      # 3 4 eu-west-3 - eu-west-2
      {
        distribution: :gaussian,
        args:  {
          mean:         0.01027,
          sd:           0.00193
        },
      },
      # 3 5 eu-west-3 - eu-north-1
      {
        distribution: :gaussian,
        args:  {
          mean:         0.03058,
          sd:           0.00392
        },
      },
      # 3 6 eu-west-3 - ca-central-1
      {
        distribution: :gaussian,
        args:  {
          mean:         0.08764,
          sd:           0.00619
        },
      },
      # 3 7 eu-west-3 - us-eaast-1
      {
        distribution: :gaussian,
        args:  {
          mean:         0.08341,
          sd:           0.00175
        },
      },
    ],
    # location 4
    [
      # 4 4 eu-west-2 - eu-west-2 (intra)
      {
        distribution: :mixture,
        args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
          33, 9.24E-6, 1.69E-6, 33, 10.87E-6, 1.73E-6, 33, 11.19E-6, 1.40E-6)
      },
      # 4 5 eu-west-2 - eu-north-1
      {
        distribution: :gaussian,
        args:  {
          mean:         0.03281,
          sd:           0.00219
        },
      },
      # 4 6 eu-west-2 - ca-central-1
      {
        distribution: :gaussian,
        args:  {
          mean:         0.08073,
          sd:           0.00613
        },
      },
      # 4 7 eu-west-2 - us-east-1
      {
        distribution: :gaussian,
        args:  {
          mean:         0.07812,
          sd:           0.00640
        },
      },
    ],
    # location 5
    [
      # 5 5 eu-north-1 - eu-north-1 (intra)
      {
        distribution: :mixture,
        args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
          33, 9.24E-6, 1.69E-6, 33, 10.87E-6, 1.73E-6, 33, 11.19E-6, 1.40E-6)
      },
      # 5 6 eu-north-1 - ca-central-1
      {
        distribution: :gaussian,
        args:  {
          mean:         0.11059,
          sd:           0.00708
        },
      },
      # 5 7 eu-north-1 - us-east-1
      {
        distribution: :gaussian,
        args:  {
          mean:         0.10856,
          sd:           0.00269
        },
      },
    ],
    # location 6
    [
      # 6 6 ca-central-1 ca-central-1 (intra)
      {
        distribution: :mixture,
        args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
          33, 9.24E-6, 1.69E-6, 33, 10.87E-6, 1.73E-6, 33, 11.19E-6, 1.40E-6)
      },
      # 6 7 ca-central-1 - us-east-1
      {
        distribution: :gaussian,
        args:  {
          mean:         0.01766,
          sd:           0.00655
        },
      },
    ],
    # location 7
    [
      # 7 7 us-east-1 - us-east-1 (intra)
      {
        distribution: :mixture,
        args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
          33, 9.24E-6, 1.69E-6, 33, 10.87E-6, 1.73E-6, 33, 11.19E-6, 1.40E-6)
      },
    ]
  ]


# MEC location is 1

# customers located at Local DC -- downtown 

customers \
  1 => { location_id: 0 }


request_gen \
1 => {
  workflow_types: 1,
  # request_distribution: {distribution: :exponential, args: { rate: 1 / 0.03766478342749529, seed: seed }},
  starting_time: start_time,
  request_distribution: {distribution: :exponential, args: { rate: 100, seed: seed }},
  num_requests: 100_000,
  num_customers: 1
},
2 => {
  workflow_types: 1,
  # request_distribution: {distribution: :exponential, args: { rate: 1 / 0.03766478342749529, seed: seed }},
  starting_time: start_time + 30.seconds,
  request_distribution: {distribution: :exponential, args: { rate: 150, seed: seed }},
  num_requests: 20_000,
  num_customers: 1
},
3 => {
  workflow_types: 1,
  # request_distribution: {distribution: :exponential, args: { rate: 1 / 0.03766478342749529, seed: seed }},
  starting_time: start_time + 70.seconds,
  request_distribution: {distribution: :exponential, args: { rate: 50, seed: seed }},
  num_requests: 10_000,
  num_customers: 1
}


request_generation \
  filename: '/Users/filippo/Downloads/replica1/req_logs_1665769470.3884256_rep1_rps15.0_nreq5000.csv'
# filename: '/Users/filippo/Downloads/measures_with_replicas/replica1/r1_c5.csv'
# filename: '/Users/filippo/Downloads/measures_with_replicas/replica1/r1_c5.csv'


# all microservices have an equal service time for mec or cloud resources
microservice_types \
"MS1"=>{:service_time_distribution=>
{:mec=> {distribution: :gaussian, args: {mean: 0.01143607, sd: 0.00301789, seed: seed}},
 :cloud=>{:distribution=>:gaussian, :args=>{:mean=>0.053011, :sd=>0.006149, :seed=>12345}}},
 :resources_requirements_cpu=>50, 
 :resources_requirements_memory=>30,
 :wait_for => ["MS2"],
},
"MS2"=>{:service_time_distribution=>{:mec=>{distribution: :gaussian, args: {mean: 0.0289486, sd: 0.004604541, seed: seed}},
:cloud=>{:distribution=>:gaussian, :args=>{:mean=>0.053011, :sd=>0.006149, :seed=>12345}}}, 
:resources_requirements_cpu=>35, 
:resources_requirements_memory=>25, 
:node_affinity=>"local"
}

services \
  'MS1' => {
    serviceName: 'Service1',
    selector: 'MS1'
  },
  'MS2' => {
    serviceName: 'Service2',
    selector: 'MS2'
  }

replica_sets \
  'app' => {
      name: 'rs_1',
      selector: 'MS1',
      replicas: 10,
  },
  'app2' => {
      name: 'rs_2',
      selector: 'MS2',
      replicas: 10,
  }

horizontal_pod_autoscalers \
     'app' => {
      kind: 'ReplicaSet',
      # this is equivalent to selector/label
      name: 'MS1',
      minReplicas: 10,
      maxReplicas: 50,
      periodSeconds: 15,
      # if processing time is greater than the ...
      targetProcessingPercentage: 1.2
  },
    'app2' => {
      kind: 'ReplicaSet',
      # this is equivalent to selector/label
      name: 'MS2',
      minReplicas: 10,
      maxReplicas: 50,
      periodSeconds: 15,
      targetProcessingPercentage: 1.2
  }

workflow_types \
  1 => {
    component_sequence: [
      { name: 'MS1' }, 
      { name: 'MS2' },
    ],
  }

# just an example of a custom stats here ---
# so we can collect the data for the Experimental Result
# section

custom_stats \
  [
    { workflow_type_id: 1, customer_id: 1, longer_than: [35.msecs, 45.msecs, 50.msecs, 55.msecs, 60.msecs, 65.msecs] },
  ]

evaluation \
  cluster_hourly_cost: [
    { cluster: :one, fixed_cpu_hourly_cost: 0.100, fixed_memory_hourly_cost: 0.100 },
    { cluster: :two, fixed_cpu_hourly_cost: 0.300, fixed_memory_hourly_cost: 0.250 },
    { cluster: :three, fixed_cpu_hourly_cost: 0.300, fixed_memory_hourly_cost: 0.315 },
    { cluster: :four, fixed_cpu_hourly_cost: 0.500, fixed_memory_hourly_cost: 0.315 },
    { cluster: :five, fixed_cpu_hourly_cost: 0.500, fixed_memory_hourly_cost: 0.315 },
    { cluster: :six, fixed_cpu_hourly_cost: 0.600, fixed_memory_hourly_cost: 0.315 },
    { cluster: :seven, fixed_cpu_hourly_cost: 0.600, fixed_memory_hourly_cost: 0.315 },
  ],

  penalties: lambda {|general_stats, per_workflow_and_customer_stats|
    # 500$ penalties if MTTR takes more than 50 msecs
    500.0 if general_stats.mean > 0.500
  }

      