start_time DateTime.civil(2020,5,28,0,0,0).to_time
warmup_duration 10.seconds

duration 1.minute

clusters \
  one: {
    name: "Local DC- EService Provider Edge",
    location_id: 1,
    type: :mec,
    node_number: 25, 
    node_resources_cpu: 100, 
    node_resources_memory: 100,
  },
  two: {
    name: "Regional DC 1 - Tier 1 Regional Edge",
    location_id: 2,
    type: :mec,
    node_number: 34, 
    node_resources_cpu: 100, 
    node_resources_memory: 100,
  },
    three: {
    name: "Bologna G. Margherita - Edge MEC",
    location_id: 3,
    type: :mec,
    node_number: 34, 
    node_resources_cpu: 100, 
    node_resources_memory: 100,
  },
  four: {
    name: "Remote DC - Centralized DC",
    location_id: 4,
    type: :cloud,
    node_number: 200, 
    node_resources_cpu: 500, 
    node_resources_memory: 500,
  }


latency_models \
  [
    # 0 end-user location
    [
      # 0 0 -- end-user end-user (not used)
      {
        distribution: :gaussian,
        args:  {
          mean:         0.00301,
          sd:           0.00142
        },
      },
      # 0 1 -- end-user- local DC
      {
        distribution: :gaussian,
        args:  {
          mean:         0.00301,
          sd:           0.00142
        },
      },
      # 0 2 end-user - Tier 1
      {
        distribution: :mixture,
          args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
          50, 0.0126, 0.00582, 50, 0.0198, 0.00195)
      },
      # 0 3 end-user - Tier 2
      {
        distribution: :mixture,
        args:  ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
          50, 0.02658, 0.00205, 50, 0.03228, 0.00643)
      },
      # 0 4 end-user - Remote DC
      {
        distribution: :mixture,
        args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
          50, 0.10455, 0.00673, 50, 0.10013, 0.00189)
      },
    ],
    # 1
    [
      # 1 1 -- local DC - local DC (intra)
      {
        distribution: :gaussian,
        args:  {
          mean:         0.00301,
          sd:           0.00142
        },
      },
      # 1 2 Local - Tier 1
      {
        distribution: :mixture,
          args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
          50, 0.0126, 0.00582, 50, 0.0198, 0.00195)
      },
      # 1 3 Local - Tier 2
      {
        distribution: :mixture,
        args:  ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
          50, 0.02658, 0.00205, 50, 0.03228, 0.00643)
      },
      # 1 4 Local - Remote DC
      {
        distribution: :mixture,
        args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
          50, 0.10455, 0.00673, 50, 0.10013, 0.00189)
      },
    ],
    # location :2
    [
      #  2 2 Tier 1 - Tier 1 (intra)
      {
        distribution: :gaussian,
        args:  {
          mean:         0.009,
          sd:           0.001
        },
      },
      # 2 3 Tier 1 - Tier 2
      {
        distribution: :mixture,
        args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
          25, 0.01634, 0.00182, 25, 0.02316, 0.00318, 25, 0.01027, 0.00193, 25, 0.03058, 0.00392)
      },
      # 2 4 Tier 1 - Remote DC
      {
        distribution: :mixture,
        args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
          25, 0.09461, 0.00646, 25, 0.09108, 0.00205, 25, 0.08764, 0.00619, 25, 0.08341, 0.00175)
      },
    ],
    # location 3
    [
      # 3 3 Tier 2 - Tier 2 (intra)
      {
        distribution: :gaussian,
        args:  {
          mean:         0.030,
          sd:           0.005
        },
      },
      # 3 4 Tier 2 - Remote DC
      {
        distribution: :mixture,
        args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
          25, 0.08073, 0.00613, 25, 0.07812, 0.00640, 25, 0.11059, 0.00708, 25, 0.10856, 0.00269)
      },
    ],
    # location 4
    [
      # 4 4 Remote DC - Remote DC (intra)
      {
        distribution: :gaussian,
        args:  {
          mean:         0.030,
          sd:           0.005
        },
      }
    ],
  ]

# MEC locations are 0,1,3
# Cloud location has id 2

# customers located at Local DC -- downtown (gaming arena)
customers \
  1 => { location_id: 0 }


microservice_types \
  'Video Transcoding' => {
    service_time_distribution: {
      # 1 request processed every 200ms at the edge, 150ms in cloud
      mec: { distribution: :exponential, args: { rate: 1 / 0.05 } },
      cloud: { distribution: :exponential, args: { rate: 1 / 0.04 } },
    },
    resources_requirements_cpu: 30,
    resources_requirements_memory: 30,
    # estimated_workload: 50,
  },
  'Visual Rendering' => {
    service_time_distribution: {
      mec: { distribution: :exponential, args: { rate: 1 / 0.06 } },
      cloud: { distribution: :exponential, args: { rate: 1 / 0.045 } }, 
  },
    resources_requirements_cpu: 35,
    resources_requirements_memory: 35,
    # define also the lookup component and load balancer as part of this service
  },
  'State Management' => {
    service_time_distribution: {
      mec: { distribution: :exponential, args: { rate: 1 / 0.06 } },
      cloud: { distribution: :exponential, args: { rate: 1 / 0.045 } }, 
  },
    resources_requirements_cpu: 35,
    resources_requirements_memory: 35,
    # define also the lookup component and load balancer as part of this service
  }

services \
  'Video Transcoding' => {
    serviceName: 'Service1',
    selector: 'Video Transcoding'
  },
  'Visual Rendering' => {
    serviceName: 'Service2',
    selector: 'Visual Rendering'
  },
  'State Management' => {
    serviceName: 'Service3',
    selector: 'State Management'
  }

replica_sets \
  'app' => {
      name: 'rs_1',
      selector: 'Video Transcoding',
      replicas: 500,
  },
  'app2' => {
      name: 'rs_2',
      selector: 'Visual Rendering',
      replicas: 500,
  },
  'app3' => {
      name: 'rs_3',
      selector: 'State Management',
      replicas: 500,
  }


horizontal_pod_autoscalers \
     'app' => {
      kind: 'ReplicaSet',
      # this is equivalent to selector/label
      name: 'Video Transcoding',
      minReplicas: 10,
      maxReplicas: 10000,
      periodSeconds: 120,
      # if processing time is greater than the ...
      targetProcessingPercentage: 3.0
  },
    'app2' => {
      kind: 'ReplicaSet',
      # this is equivalent to selector/label
      name: 'Visual Rendering',
      minReplicas: 10,
      maxReplicas: 10000,
      periodSeconds: 120,
      targetProcessingPercentage: 3.0
  },
    'app3' => {
      kind: 'ReplicaSet',
      # this is equivalent to selector/label
      name: 'State Management',
      minReplicas: 10,
      maxReplicas: 10000,
      periodSeconds: 120,
      targetProcessingPercentage: 3.0
  }


workflow_types \
  1 => {
    component_sequence: [
      { name: 'Video Transcoding' }, 
      { name: 'Visual Rendering' },
      { name: 'State Management' },
    ],
  },
  2 => {
    component_sequence: [
      { name: 'State Management' },
      { name: 'Visual Rendering' },
    ],
    #next_component_selection: :random,
    }

request_generation \
  filename: '<pwd>/use-case-requests.csv'

# just an example of a custom stats here ---
# so we can collect the data for the Experimental Result
# section
custom_stats \
  [
    { workflow_type_id: 1, customer_id: 0, longer_than: [250.msecs, 400.msecs] },
    { workflow_type_id: 2, customer_id: 0, longer_than: [150.msecs, 300.msecs] },
  ]

evaluation \
  cluster_hourly_cost: [
    { cluster: :one, fixed_cpu_hourly_cost: 0.100, fixed_memory_hourly_cost: 0.100 },
    { cluster: :two, fixed_cpu_hourly_cost: 0.200, fixed_memory_hourly_cost: 0.250 },
    { cluster: :three, fixed_cpu_hourly_cost: 0.300, fixed_memory_hourly_cost: 0.315 },
  ],

  penalties: lambda {|general_stats, per_workflow_and_customer_stats|
    # 500$ penalties if MTTR takes more than 50 msecs
    500.0 if general_stats.mean > 0.500
  }
