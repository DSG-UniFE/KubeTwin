start_time DateTime.civil(2013,1,18,0,0,0).to_time
warmup_duration 10.seconds

duration 1.minute

clusters \
  one: {
    name: "Bologna Saragozza - Edge MEC",
    location_id: 0,
    type: :mec,
    # interesting parameter here
    node_number: 25, 
    node_resources_cpu: 100, 
    node_resources_memory: 100,
  },
  two: {
    name: "Bologna Galvani - Edge MEC",
    # maximum_vm_capacity: {
    #   medium: 50_000,
    #   large: 50_000,
    # },
    location_id: 1,
    type: :mec,
    node_number: 34, 
    node_resources_cpu: 100, 
    node_resources_memory: 100,
  },
  three: {
    name: "KCC Cloud Facility",
    # maximum_vm_capacity: {
    #   medium: 50_000,
    #   large: 50_000,
    # },
    location_id: 2,
    type: :cloud,
    node_number: 5000, 
    node_resources_cpu: 500, 
    node_resources_memory: 500,
  },
    four: {
    name: "Bologna G. Margherita - Edge MEC",
    location_id: 3,
    type: :mec,
    node_number: 34, 
    node_resources_cpu: 100, 
    node_resources_memory: 100,
  }


latency_models \
  [
    # 0
    [
      # 0 0
      {
        distribution: :gaussian,
        args:  {
          mean:         0.009,
          sd:           0.001
        },
      },
      # 0 1
      {
        distribution: :gaussian,
        args:  {
          mean:         0.009,
          sd:           0.001
        },
      },
      # 0 2
      {
        distribution: :gaussian,
        args:  {
          mean:         0.030,
          sd:           0.005
        },
      },
      # 0 3
      {
        distribution: :gaussian,
        args:  {
          mean:         0.030,
          sd:           0.005
        },
      },
    ],
    # location :1
    [
      #  1 1
      {
        distribution: :gaussian,
        args:  {
          mean:         0.009,
          sd:           0.001
        },
      },
      # 1 2
      {
        distribution: :gaussian,
        args:  {
          mean:         0.030,
          sd:           0.005
        },
      },
      # 1 3
      {
        distribution: :gaussian,
        args:  {
          mean:         0.030,
          sd:           0.005
        },
      },
    ],
    # location 2
    [
      # 2 2
      {
        distribution: :gaussian,
        args:  {
          mean:         0.030,
          sd:           0.005
        },
      },
      # 2 3
      {
        distribution: :gaussian,
        args:  {
          mean:         0.030,
          sd:           0.005
        },
      },
    ],
    # location 3
    [
      # 3 3
      {
        distribution: :gaussian,
        args:  {
          mean:         0.030,
          sd:           0.005
        },
      },
      # 2 3
      {
        distribution: :gaussian,
        args:  {
          mean:         0.030,
          sd:           0.005
        },
      },
    ],
  ]

# MEC locations are 0,1,3
# Cloud location has id 2
customers \
  1 => { location_id: 1 },
  2 => { location_id: 0 },
  3 => { location_id: 3 }



microservice_types \
  'Video Transcoding' => {
    service_time_distribution: {
      # 1 request processed every 200ms at the edge, 150ms in cloud
      mec: { distribution: :exponential, args: { rate: 1 / 0.05 } },
      cloud: { distribution: :exponential, args: { rate: 1 / 0.04 } },
    },
    resources_requirements_cpu: 30,
    resources_requirements_memory: 30,
    cpu_hourly_cost: 0.150,
    memory_hourly_cost: 0.150,
    # estimated_workload: 50,
  },
  'Visual Rendering' => {
    service_time_distribution: {
      mec: { distribution: :exponential, args: { rate: 1 / 0.06 } },
      cloud: { distribution: :exponential, args: { rate: 1 / 0.045 } }, 
  },
    resources_requirements_cpu: 35,
    resources_requirements_memory: 35,
    cpu_hourly_cost: 0.200,
    memory_hourly_cost: 0.200,
    # define also the lookup component and load balancer as part of this service
  },
  'State Management' => {
    service_time_distribution: {
      mec: { distribution: :exponential, args: { rate: 1 / 0.06 } },
      cloud: { distribution: :exponential, args: { rate: 1 / 0.045 } }, 
  },
    resources_requirements_cpu: 35,
    resources_requirements_memory: 35,
    cpu_hourly_cost: 0.300,
    memory_hourly_cost: 0.300,
    # define also the lookup component and load balancer as part of this service
  }

services \
  'Video Transcoding' => {
    serviceName: 'Service1',
    selector: 'Video Transcoding'
  },
  'Visual Rendering' => {
    serviceName: 'Service2',
    selector: 'Visual Rendering'
  },
  'State Management' => {
    serviceName: 'Service3',
    selector: 'State Management'
  }

replica_sets \
  'app' => {
      name: 'rs_1',
      selector: 'Video Transcoding',
      replicas: 400,
  },
  'app2' => {
      name: 'rs_2',
      selector: 'Visual Rendering',
      replicas: 400,
  },
  'app3' => {
      name: 'rs_3',
      selector: 'State Management',
      replicas: 400,
  }


horizontal_pod_autoscalers \
     'app' => {
      kind: 'ReplicaSet',
      # this is equivalent to selector/label
      name: 'Video Transcoding',
      minReplicas: 10,
      maxReplicas: 10000,
      periodSeconds: 120,
      # if processing time is greater than the ...
      targetProcessingPercentage: 5.0
  },
    'app2' => {
      kind: 'ReplicaSet',
      # this is equivalent to selector/label
      name: 'Visual Rendering',
      minReplicas: 10,
      maxReplicas: 10000,
      periodSeconds: 120,
      targetProcessingPercentage: 5.0
  },
    'app3' => {
      kind: 'ReplicaSet',
      # this is equivalent to selector/label
      name: 'State Management',
      minReplicas: 10,
      maxReplicas: 10000,
      periodSeconds: 120,
      targetProcessingPercentage: 5.0
  }


workflow_types \
  1 => {
    component_sequence: [
      { name: 'Video Transcoding' }, 
      { name: 'Visual Rendering' },
      { name: 'State Management' },
    ],
  },
  2 => {
    component_sequence: [
      { name: 'State Management' },
      { name: 'Visual Rendering' },
    ],
    #next_component_selection: :random,
    }

request_generation \
  filename: '<pwd>/requests.csv'

evaluation \
  cluster_hourly_cost: [
    { cluster: :one, fixed_cpu_hourly_cost: 0.100, fixed_memory_hourly_cost: 0.100 },
    { cluster: :two, fixed_cpu_hourly_cost: 0.200, fixed_memory_hourly_cost: 0.250 },
    { cluster: :three, fixed_cpu_hourly_cost: 0.300, fixed_memory_hourly_cost: 0.315 },
  ],
  penalties: lambda {|general_stats, per_workflow_and_customer_stats|
    # 500$ penalties if MTTR takes more than 50 msecs
    500.0 if general_stats.mean > 0.050
  }
