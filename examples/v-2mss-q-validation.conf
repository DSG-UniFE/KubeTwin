start_time DateTime.civil(2020,5,28,0,0,0).to_time
warmup_duration 0.seconds
cooldown_duration 0.seconds

duration 200.seconds

#stats_print_interval 1

seed 12345
#seeds \
#  {communication_latencies 12345}

clusters \
  one: {
    name: "eu-south-1 - Local DC",
    location_id: 1,
    type: :mec,
    tier: "local",
    node_number: 1, 
    node_resources_cpu: 10000, 
    node_resources_memory: 10000,
  }


latency_models \
  [
    # 0 end-user location
    [
      # 0 0 -- end-user end-user (not-used)
      {
        distribution: :gaussian, args: {mean: 0.100E-10, sd: 0.50E-10, seed: seed}
      },
      {
        distribution: :gaussian, args: {mean: 0.100E-10, sd: 0.50E-10, seed: seed}
      }
    ],
    # 1 location
    [
      # location 1 - 1 
      # these are intra-dc (for node in the same cluster)
      # 0 1 -- end-user- cluster (use )
      {
        distribution: :gaussian, args: {mean: 0.100E-10, sd: 0.50E-10, seed: seed}
      }
      #{
      #  distribution: :mixture,
      #  args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
      #    33, 9.24E-6, 1.69E-6, 33, 10.87E-6, 1.73E-6, 33, 11.19E-6, 1.40E-6), seed: seed
      #}
    ]
  ]


# MEC location is 1

# customers located at Local DC -- downtown 

customers \
  1 => { location_id: 0 }

request_generation \
filename: '/Users/filippo/Downloads/measures_with_replicas/replica1/r1_c5.csv'

#request_gen \
#1 => {
#  workflow_types: 1,
#  # request_distribution: {distribution: :exponential, args: { rate: 1 / 0.03766478342749529, seed: seed }},
#  request_distribution: {distribution: :exponential, args: { rate: 30.0, seed: seed }},
#  num_customers: 1
#}


# all microservices have an equal service time for mec or cloud resources
microservice_types \
"Q"=>{:service_time_distribution=>{:mec=>{:distribution=>:mixture, :args=>[{:distribution=>:gaussian, :weight=>0.0026233031890091794, :args=>{:mean=>0.021738561384171733, :sd=>0.0028068742082233036, :seed=>12345}}, {:distribution=>:gaussian, :weight=>0.00046358010511692623, :args=>{:mean=>0.015055248397200769, :sd=>0.009383493411330726, :seed=>12345}}, {:distribution=>:gaussian, :weight=>0.0002968470597515898, :args=>{:mean=>0.007314182114051342, :sd=>0.01855673531841223, :seed=>12345}}]}, :cloud=>{:distribution=>:gaussian, :args=>{:mean=>0.053011, :sd=>0.006149, :seed=>12345}}}, :resources_requirements_cpu=>5, :resources_requirements_memory=>5, :node_affinity=>"local"}, 

"MS1"=>{:service_time_distribution=>{:mec=>{:distribution=>:mixture, :args=>[{:distribution=>:gaussian, :weight=>0.0007156417544322537, :args=>{:mean=>0.010146894027002301, :sd=>0.003662483483249311, :seed=>12345}}, {:distribution=>:gaussian, :weight=>0.00022565674847703894, :args=>{:mean=>0.009168735327059287, :sd=>0.0074540159413304585, :seed=>12345}}, {:distribution=>:gaussian, :weight=>0.0011862423845405243, :args=>{:mean=>0.012181104945170773, :sd=>0.0015319619642340508, :seed=>12345}}]}, :cloud=>{:distribution=>:gaussian, :args=>{:mean=>0.053011, :sd=>0.006149, :seed=>12345}}}, :resources_requirements_cpu=>30, :resources_requirements_memory=>25, :node_affinity=>"local"}, 

"MS2"=>{:service_time_distribution=>{:mec=>{:distribution=>:mixture, :args=>[{:distribution=>:gaussian, :weight=>2.1690843926877407e-05, :args=>{:mean=>0.0064905359948970575, :sd=>0.0010966244600640164, :seed=>12345}}, {:distribution=>:gaussian, :weight=>0.00037743828739587594, :args=>{:mean=>0.011431547986500082, :sd=>0.0031261916708746965, :seed=>12345}}, {:distribution=>:gaussian, :weight=>0.0024489472042086608, :args=>{:mean=>0.01666283222061641, :sd=>0.002849315521039993, :seed=>12345}}]}, :cloud=>{:distribution=>:gaussian, :args=>{:mean=>0.053011, :sd=>0.006149, :seed=>12345}}}, :resources_requirements_cpu=>30, :resources_requirements_memory=>25, :node_affinity=>"local"}

services \
  'Q' => {
    serviceName: 'ServiceQ',
    selector: 'Q'
  },
  'MS1' => {
    serviceName: 'Service1',
    selector: 'MS1'
  },
  'MS2' => {
    serviceName: 'Service2',
    selector: 'MS2'
  }

replica_sets \
  'appq' => {
      name: 'rs_q',
      selector: 'Q',
      replicas: 1,
  },
  'app' => {
      name: 'rs_1',
      selector: 'MS1',
      replicas: 1,
  },
  'app2' => {
      name: 'rs_2',
      selector: 'MS2',
      replicas: 1,
  }


workflow_types \
  1 => {
    component_sequence: [
      { name: 'Q' }, 
      { name: 'MS1' }, 
      { name: 'MS2' },
    ],
  }

# just an example of a custom stats here ---
# so we can collect the data for the Experimental Result
# section

custom_stats \
  [
    { workflow_type_id: 1, customer_id: 1, longer_than: [35.msecs, 45.msecs, 50.msecs, 55.msecs, 60.msecs, 65.msecs] },
  ]

evaluation \
  cluster_hourly_cost: [
    { cluster: :one, fixed_cpu_hourly_cost: 0.100, fixed_memory_hourly_cost: 0.100 },
    { cluster: :two, fixed_cpu_hourly_cost: 0.300, fixed_memory_hourly_cost: 0.250 },
    { cluster: :three, fixed_cpu_hourly_cost: 0.300, fixed_memory_hourly_cost: 0.315 },
    { cluster: :four, fixed_cpu_hourly_cost: 0.500, fixed_memory_hourly_cost: 0.315 },
    { cluster: :five, fixed_cpu_hourly_cost: 0.500, fixed_memory_hourly_cost: 0.315 },
    { cluster: :six, fixed_cpu_hourly_cost: 0.600, fixed_memory_hourly_cost: 0.315 },
    { cluster: :seven, fixed_cpu_hourly_cost: 0.600, fixed_memory_hourly_cost: 0.315 },
  ],

  penalties: lambda {|general_stats, per_workflow_and_customer_stats|
    # 500$ penalties if MTTR takes more than 50 msecs
    500.0 if general_stats.mean > 0.500
  }
