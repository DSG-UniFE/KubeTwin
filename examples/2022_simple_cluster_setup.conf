start_time DateTime.civil(2020,5,28,0,0,0).to_time
warmup_duration 10.seconds
cooldown_duration 10.seconds

duration 2.minute

stats_print_interval 1

seed 12345

# we have a single cluster for now
clusters \
  one: {
    name: "eu-south-1 - Local DC",
    location_id: 1,
    type: :mec,
    tier: 'local',
    # if few available the optimzer crashes
    node_number: 100, 
    node_resources_cpu: 100, 
    node_resources_memory: 100,
  }

# simplified latency model here
# we suppose to have a single user location
# the cluster is single-node

latency_models \
  [
    # 0 end-user location
    [
      # 0 0 -- end-user end-user (not-used)
      {
        distribution: :gaussian,
        args:  {
          mean:         0.00301,
          sd:           0.00142,
          seed:         seed
        },
      },
      {
        distribution: :gaussian,
        args:  {
          mean:         0.0126,
          sd:           0.00582,
          seed:         seed
        },
      },
    ],
    # 1 location
    [
      # location 1 - 1 
      # these are intra-dc (for node in the same cluster)
      # 0 1 -- end-user- cluster (use )
       {
        distribution: :mixture,
        args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
          33, 9.24E-6, 1.69E-6, 33, 10.87E-6, 1.73E-6, 33, 11.19E-6, 1.40E-6), seed: seed
      }
    ]
  ]

# MEC location is 1

# customers located at Local DC -- downtown 
customers \
  1 => { location_id: 0 }


# all microservices have an equal service time for mec or cloud resources
microservice_types \
  'List Services' => {
    service_time_distribution: {
      mec: { distribution: :gaussian, args: { mean: 0.00251934, sd: 0.001471642003, seed: seed} },
      cloud: { distribution: :gaussian, args: { mean: 0.00251934, sd: 0.001471642003, seed: seed} },
    },
    resources_requirements_cpu: 30,
    resources_requirements_memory: 25,
  },
  'IM-P' => {   # image processing
    service_time_distribution: {
      mec: { distribution: :gaussian, args: { mean: 2.5E-3, sd: 1.47E-3, seed: seed} },
      cloud: { distribution: :gaussian, args: { mean: 2.5E-3, sd: 1.47E-3, seed: seed} },
    },
    resources_requirements_cpu: 30,
    resources_requirements_memory: 25,
  },
  # image classifier
  'IM-C' => {
    service_time_distribution: {
      mec: { distribution: :gaussian, args: { mean: 0.00251934, sd: 0.001471642003, seed: seed} },
      cloud: { distribution: :gaussian, args: { mean: 0.00251934, sd: 0.001471642003, seed: seed} },
    },
    resources_requirements_cpu: 35,
    resources_requirements_memory: 15,
  }

services \
  'List Services' => {
    serviceName: 'Service1',
    selector: 'List Services'
  },
  'IM-P' => {
    serviceName: 'Service2',
    selector: 'IM-P'
  },
  'IM-C' => {
    serviceName: 'Service3',
    selector: 'IM-C'
  }

replica_sets \
  'app' => {
      name: 'rs_1',
      selector: 'List Services',
      replicas: 1,
  },
  'app2' => {
      name: 'rs_2',
      selector: 'IM-P',
      replicas: 1,
  },
  'app3' => {
      name: 'rs_3',
      selector: 'IM-C',
      replicas: 1,
  }


workflow_types \
  1 => {
    component_sequence: [
      { name: 'List Services' }, 
      { name: 'IM-P' }, 
      { name: 'IM-C' },
    ],
  }

request_generation \
  command: 'Rscript <pwd>/generator_cnsm_2022.R'
  #filename: '<pwd>/use-case-requests.csv'

# just an example of a custom stats here ---
# so we can collect the data for the Experimental Result
# section

custom_stats \
  [
    { workflow_type_id: 1, customer_id: 0, longer_than: [250.msecs, 400.msecs] },
    { workflow_type_id: 2, customer_id: 0, longer_than: [150.msecs, 300.msecs] },
  ]

evaluation \
  cluster_hourly_cost: [
    { cluster: :one, fixed_cpu_hourly_cost: 0.100, fixed_memory_hourly_cost: 0.100 },
  ],

  penalties: lambda {|general_stats, per_workflow_and_customer_stats|
    # 500$ penalties if MTTR takes more than 50 msecs
    500.0 if general_stats.mean > 0.500
  }
