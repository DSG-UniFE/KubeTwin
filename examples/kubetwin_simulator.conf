start_time DateTime.civil(2013,1,18,0,0,0).to_time
warmup_duration 10.seconds
duration 1.minute

# Defining skeleton configuration for KubeTwin

clusters \
  one: {
    name: "Bologna Saragozza - Edge MEC",
    location_id: 0,
    type: :mec,
  },
  two: {
    name: "Bologna Galvani - Edge MEC",
    # maximum_vm_capacity: {
    #   medium: 50_000,
    #   large: 50_000,
    # },
    location_id: 1,
    type: :mec,
  }

latency_models \
  [
    # location 0
    [
      {
        distribution: :gaussian,
        args:  {
          mean:         0.009,
          sd:           0.001
        },
      },
      {
        distribution: :gaussian,
        args:  {
          mean:         0.009,
          sd:           0.001
        },
      },
    ],
    # location 1
    [
      {
        distribution: :gaussian,
        args:  {
          mean:         0.009,
          sd:           0.001
        },
      },
    ],
  ]


customers \
  1 => { location_id: 1 }
  # first and only customer (id: 0) is in location with id=1


service_component_types \
  'Web Server' => {
    service_time_distribution: {
      service_n_cycle: 300_000,
      # the code below was better
      # 1 request processed every 9ms
      service_noise_rv: { distribution: :gaussian, args: { mean: 0.009, sd: 0.001 } },
    },
    # estimated_workload: 50,
  },
  'App Server' => {
    service_time_distribution: {

      service_n_cycle: 500_000,
      # 1 request processed every 12ms
      service_noise_rv: { distribution: :gaussian, args: { mean: 0.012, sd: 0.002 } },
    },
    # define also the lookup component and load balancer as part of this service
  }

  # define multiple replica sets here
  replica_sets \
  # the key could be the name in here
  'app' => {
      selector: 'Web Server',
      # where to allocate the replica set
      cluster_id: :one,
      # the number of replicas 
      # should this number be configurable somewhere else?
      # in the allocation file?
      replicas: 25,
      # here we can also specify the control loop 
      # configuration, i.e, when to run the control
  },
  'app2' => {
      selector: 'App Server',
      # where to allocate the replica set
      cluster_id: :one,
      # the number of replicas 
      # should this number be configurable somewhere else?
      # in the allocation file?
      replicas: 30,
  }

# workflow (or job) types descriptions
workflow_types \
  1 => {
    component_sequence: [
      { name: 'Web Server' }, # no need for type: dedicated / shared
      { name: 'App Server' },
    ],
    next_component_selection: :random,
  }


# to be defined
#constraints \
#  'Web Server' => [
#    { cluster: 1, min: 0, max: 300 },
#    { cluster: 2, min: 0, max: 300 },
#  ],
#  'App Server' => [
#    { cluster: 1, min: 0, max: 300 },
#    { cluster: 2, min: 0, max: 300 },
#  ]


# input request source (the generator.R script)
request_generation \
  filename: '<pwd>/requests.csv'
  # command: '<pwd>/generator.R'


# evaluation model
evaluation \
  vm_hourly_cost: [
    { cluster: :one, cost: 0.160 },
    { cluster: :two, cost: 0.320 },
  ],
  penalties: lambda {|general_stats, per_workflow_and_customer_stats|
    # 500$ penalties if MTTR takes more than 50 msecs
    500.0 if general_stats.mean > 0.050
  }


# vim: filetype=ruby
