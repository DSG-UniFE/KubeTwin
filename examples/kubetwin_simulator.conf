start_time DateTime.civil(2013,1,18,0,0,0).to_time
warmup_duration 10.seconds
duration 5.minute

# Defining skeleton configuration for KubeTwin

clusters \
  one: {
    name: "Bologna Saragozza - Edge MEC",
    location_id: 0,
    type: :mec,
    node_number: 25,
    # interesting parameter here
    node_resources: 100,
  },
  two: {
    name: "Bologna Galvani - Edge MEC",
    # maximum_vm_capacity: {
    #   medium: 50_000,
    #   large: 50_000,
    # },
    location_id: 1,
    type: :mec,
    node_number: 34,
    node_resources: 100,
  },
  thre: {
    name: "KCC Cloud Facility",
    # maximum_vm_capacity: {
    #   medium: 50_000,
    #   large: 50_000,
    # },
    location_id: 2,
    type: :cloud,
    node_number: 1,
    node_resources: 150,
  }

latency_models \
  [
    # location 0
    [
      {
        distribution: :gaussian,
        args:  {
          mean:         0.009,
          sd:           0.001
        },
      },
      {
        distribution: :gaussian,
        args:  {
          mean:         0.009,
          sd:           0.001
        },
      },
      {
        distribution: :gaussian,
        args:  {
          mean:         0.030,
          sd:           0.005
        },
      },
    ],
    # location 1
    [
      {
        distribution: :gaussian,
        args:  {
          mean:         0.009,
          sd:           0.001
        },
      },
      {
        distribution: :gaussian,
        args:  {
          mean:         0.030,
          sd:           0.005
        },
      },
    ],
    # location 2
    [
      {
        distribution: :gaussian,
        args:  {
          mean:         0.030,
          sd:           0.005
        },
      },
      {
        distribution: :gaussian,
        args:  {
          mean:         0.030,
          sd:           0.005
        },
      },
    ],
  ]


customers \
  1 => { location_id: 1 }
  # first and only customer (id: 0) is in location with id=1


service_component_types \
  'Web Server' => {
    service_time_distribution: {
      # 1 request processed every 200ms at the edge, 150ms in cloud
      mec: { distribution: :exponential, args: { rate: 1 / 0.05 } },
      cloud: { distribution: :exponential, args: { rate: 1 / 0.04 } },
    },
    resources_requirements: 30,
    # estimated_workload: 50,
  },
  'App Server' => {
    service_time_distribution: {
      mec: { distribution: :exponential, args: { rate: 1 / 0.06 } },
      cloud: { distribution: :exponential, args: { rate: 1 / 0.045 } }, 
  },
    resources_requirements: 35,
    # define also the lookup component and load balancer as part of this service
  }


  # need to think about specifying all these configurations
  services \
  'Web Server' => {
    selector: 'Web Server'
  },
  'App Server' => {
    selector: 'App Server'
  }

  # define multiple replica sets here
  # the key could be the name in here
  replica_sets \
  'app' => {
      selector: 'Web Server',
      # where to allocate the replica set
      # cluster_id: :one,
      # the number of replicas 
      # should this number be configurable somewhere else?
      # in the allocation file?
      replicas: 25,
      # here we can also specify the control loop 
      # configuration, i.e, when to run the control
  },
  'app2' => {
      selector: 'App Server',
      # where to allocate the replica sets
      # do we need to bound the replica set to a specific cluster?
      # do not think so
      # cluster_id: :two,
      # the number of replicas 
      # should this number be configurable somewhere else?
      # in the allocation file?
      replicas: 10,
  }
  

  horizontal_pod_autoscalers \
     'app' => {
      kind: 'ReplicaSet',
      # this is equivalent to selector/label
      name: 'Web Server',
      minReplicas: 10,
      maxReplicas: 50,
      periodSeconds: 15,
      # if processing time is greater than the ...
      targetProcessingPercentage: 0.5
  },
    'app2' => {
      kind: 'ReplicaSet',
      # this is equivalent to selector/label
      name: 'App Server',
      minReplicas: 10,
      maxReplicas: 50,
      periodSeconds: 15,
      targetProcessingPercentage: 0.5
  }


# workflow (or job) types descriptions
workflow_types \
  1 => {
    component_sequence: [
      { name: 'Web Server' }, # no need for type: dedicated / shared
      { name: 'App Server' },
    ],
    next_component_selection: :random,
  }


# to be defined
#constraints \
#  'Web Server' => [
#    { cluster: 1, min: 0, max: 300 },
#    { cluster: 2, min: 0, max: 300 },
#  ],
#  'App Server' => [
#    { cluster: 1, min: 0, max: 300 },
#    { cluster: 2, min: 0, max: 300 },
#  ]


# input request source (the generator.R script)
request_generation \
  filename: '<pwd>/requests.csv'
  # command: '<pwd>/generator.R'


# evaluation model
evaluation \
  vm_hourly_cost: [
    { cluster: :one, cost: 0.160 },
    { cluster: :two, cost: 0.320 },
    { cluster: :three, cost: 0.320 },
  ],
  penalties: lambda {|general_stats, per_workflow_and_customer_stats|
    # 500$ penalties if MTTR takes more than 50 msecs
    500.0 if general_stats.mean > 0.050
  }


# vim: filetype=ruby
