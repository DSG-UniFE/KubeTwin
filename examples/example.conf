start_time DateTime.civil(2013,1,18,0,0,0)
warmup_duration 10.seconds
duration 1.minute


data_centers \
  1 => {
    :maximum_vm_capacity => {
      :medium => 50_000,
      :large  => 50_000,
    },
  },
  2 => {
    :maximum_vm_capacity => {
      :medium => 50_000,
      :large  => 50_000,
    },
  }


service_component_types \
  'Web Server' => {
    :allowed_vm_types => [ :medium ],
    :service_time_distribution => {
      :medium => { :distribution => :gaussian,
                   :mean         => 0.009, # 1 request processed every 9ms
                   :sd           => 0.001 },
    },
    :estimated_workload => 50,
  },
  'App Server' => {
    :allowed_vm_types => [ :large ],
    :service_time_distribution => {
      :large  => { :distribution => :gaussian,
                   :mean         => 0.012, # 1 request processed every 12ms
                   :sd           => 0.002 },
    },
    :estimated_workload => 70,
  }


# workflow (or job) types descriptions
workflow_types \
  1 => {
    :component_sequence => [
      { :name => 'Web Server' }, # no need for :type => dedicated / shared
      { :name => 'App Server' },
    ],
    :next_component_selection => :random,
  }


# input request source (the generator.R script)
request_generation \
  :command => File.join(File.dirname(__FILE__), 'generator.R')


# evaluation model
evaluation \
  :vm_hourly_cost => [
    { :data_center => 1, :vm_type => :medium, :cost => 0.160 },
    { :data_center => 1, :vm_type => :large,  :cost => 0.320 },
    { :data_center => 2, :vm_type => :medium, :cost => 0.184 },
    { :data_center => 2, :vm_type => :large,  :cost => 0.368 }
  ],
  # 500$ penalties if MTTR takes more than 50 msecs
  :penalties => lambda {|kpis,dc_kpis| 500.0 if kpis[:mttr] > 0.050 }

# vim: filetype=ruby
