start_time DateTime.civil(2020,5,28,0,0,0).to_time
warmup_duration 10.seconds
cooldown_duration 10.seconds

duration 1020.seconds

#stats_print_interval 1

seed 12345

clusters \
  one: {
    name: "eu-south-1 - Local DC",
    location_id: 1,
    type: :mec,
    tier: "local",
    node_number: 1, 
    node_resources_cpu: 10000, 
    node_resources_memory: 10000,
  }


latency_models \
  [
    # 0 end-user location
    [
      # 0 0 -- end-user end-user (not-used)
      {
        distribution: :gaussian, args: {mean: 0.450E-2, sd: 0.50E-3, seed: seed}
      },
      {
        distribution: :gaussian, args: {mean: 0.450E-2, sd: 0.50E-3, seed: seed}
      }
      #{
      #  distribution: :mixture,
      #  args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
      #    33, 9.24E-6, 1.69E-6, 33, 10.87E-6, 1.73E-6, 33, 11.19E-6, 1.40E-6), seed: seed
      #},
      # {
      #  distribution: :mixture,
      #  args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
      #    33, 9.24E-6, 1.69E-6, 33, 10.87E-6, 1.73E-6, 33, 11.19E-6, 1.40E-6), seed: seed
      #},
    ],
    # 1 location
    [
      # location 1 - 1 
      # these are intra-dc (for node in the same cluster)
      # 0 1 -- end-user- cluster (use )
      {
        distribution: :gaussian, args: {mean: 0.450E-2, sd: 0.50E-3, seed: seed}
      }
      #{
      #  distribution: :mixture,
      #  args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
      #    33, 9.24E-6, 1.69E-6, 33, 10.87E-6, 1.73E-6, 33, 11.19E-6, 1.40E-6), seed: seed
      #}
    ]
  ]


# MEC location is 1

# customers located at Local DC -- downtown 

customers \
  1 => { location_id: 0 }

request_gen \
1 => {
  workflow_types: 1,
  # request_distribution: {distribution: :exponential, args: { rate: 1 / 0.03766478342749529, seed: seed }},
  request_distribution: {distribution: :exponential, args: { rate: 10, seed: seed }},
  num_customers: 1
}


# all microservices have an equal service time for mec or cloud resources
microservice_types \
  'MS1' => {   # image processing
    service_time_distribution: {
      mec: { distribution: :mixture,
        args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
            0.5403072, 20.67364704E-3, 9.37046455E-4,
            0.16882816 ,27.2042171E-3, 1.59062583E-3,
            0.00103734, 115.608E-3, 1.00000000E-9,
            0.24360315, 23.05551024E-3, 1.19469837E-3,
            0.04622414, 33.53224897E-3, 4.77571513E-3), seed: seed
        },
      cloud: { distribution: :uniform, args: { min_value: 0.003793 , max_value: 0.022516, mean:0.013154, seed: seed} },
    },
    resources_requirements_cpu: 30,
    resources_requirements_memory: 25,
    node_affinity: "local"
  },
  # image classifier
  'MS2' => {
    service_time_distribution: {
      mec: {distribution: :mixture,
        args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
          0.22007061, 0.01823807, 0.00052493,
          0.20505463 ,0.0147911 , 0.00074993,
          0.14367583, 0.01283659, 0.00072027,
          0.01011398, 0.02862004, 0.00580421,
          0.08104423, 0.0195364, 0.00069418,
          0.17171472, 0.01673314, 0.00069256,
          0.13493003, 0.01098017, 0.00053511,
          0.03339596, 0.02336869, 0.00206386), seed: seed
      },
      # the following is the configuration with the outliner
      #mec: { distribution: :gaussian, args: { mean: 16.29473575E-3, sd: 12.75093208E-3, seed: seed} },
      cloud: { distribution: :uniform, args: { min_value:0.007844 , max_value: 0.042693, mean:0.025268, seed: seed} },
    },
    resources_requirements_cpu: 35,
    resources_requirements_memory: 15,
    node_affinity: "local"
  }

services \
  'MS1' => {
    serviceName: 'Service1',
    selector: 'MS1'
  },
  'MS2' => {
    serviceName: 'Service2',
    selector: 'MS2'
  }

replica_sets \
  'app' => {
      name: 'rs_1',
      selector: 'MS1',
      replicas: 1,
  },
  'app2' => {
      name: 'rs_2',
      selector: 'MS2',
      replicas: 1,
  }


workflow_types \
  1 => {
    component_sequence: [
      { name: 'MS1' }, 
      { name: 'MS2' },
    ],
  }

request_generation \
  command: 'Rscript <pwd>/generator_cnsm_2022.R'
  #filename: '<pwd>/use-case-requests.csv'

# just an example of a custom stats here ---
# so we can collect the data for the Experimental Result
# section

custom_stats \
  [
    { workflow_type_id: 1, customer_id: 1, longer_than: [35.msecs, 45.msecs, 50.msecs, 55.msecs, 60.msecs, 65.msecs] },
  ]

evaluation \
  cluster_hourly_cost: [
    { cluster: :one, fixed_cpu_hourly_cost: 0.100, fixed_memory_hourly_cost: 0.100 },
    { cluster: :two, fixed_cpu_hourly_cost: 0.300, fixed_memory_hourly_cost: 0.250 },
    { cluster: :three, fixed_cpu_hourly_cost: 0.300, fixed_memory_hourly_cost: 0.315 },
    { cluster: :four, fixed_cpu_hourly_cost: 0.500, fixed_memory_hourly_cost: 0.315 },
    { cluster: :five, fixed_cpu_hourly_cost: 0.500, fixed_memory_hourly_cost: 0.315 },
    { cluster: :six, fixed_cpu_hourly_cost: 0.600, fixed_memory_hourly_cost: 0.315 },
    { cluster: :seven, fixed_cpu_hourly_cost: 0.600, fixed_memory_hourly_cost: 0.315 },
  ],

  penalties: lambda {|general_stats, per_workflow_and_customer_stats|
    # 500$ penalties if MTTR takes more than 50 msecs
    500.0 if general_stats.mean > 0.500
  }
