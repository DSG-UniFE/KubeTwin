#!/usr/bin/env ruby

begin
  require 'kube_twin'
  require 'logger'
  require 'pycall'
  require 'pycall/import'
  include PyCall::Import
  require 'yaml'
  require 'csv'
rescue LoadError
  require 'rubygems'
  require 'kube_twin'
  require 'yaml'
end

def do_abort(message)
    abort <<-EOS.gsub(/^\s+\|/, '')
      |#{message}
      |
      |Usage:
      |    #{File.basename(__FILE__)} config_file
      |
    EOS
  end
  

if File.expand_path(__FILE__) == File.expand_path($0)
    # make sure both required arguments were given
    case ARGV.size
    when 0 then
      do_abort("Missing simulator configuration files!")
    end
    # make sure simulator config file exists
    unless File.exists? ARGV[0]
      do_abort("Invalid simulator configuration file!")
    end
end

def calcualte_statistics(samples)
  # https://stackoverflow.com/questions/19484891/how-do-i-find-the-standard-deviation-in-ruby
  n = samples.length      
  mean = samples.reduce(&:+) / n
  sum_sqr = samples.map {|x| x * x}.reduce(&:+)
  std_dev = Math.sqrt((sum_sqr - n * mean * mean)/(n-1)) # => 2.7386127875258306
  return [mean, std_dev]
end

def percentile(values, percentile)
  # https://stackoverflow.com/questions/11784843/calculate-95th-percentile-in-ruby
  values_sorted = values.sort
  k = (percentile*(values_sorted.length-1)+1).floor - 1
  f = (percentile*(values_sorted.length-1)+1).modulo(1)
  return values_sorted[k] + (f * (values_sorted[k+1] - values_sorted[k]))
end

# ARGV[0] should be a config filee
comparison_conf = YAML.load_file(ARGV[0])
simulator_config_file = comparison_conf["config_file"]

# pycall import
pyfrom :scipy, import: :stats
pyimport :pandas, as: :pd

# here run the optimizer on the oracle
# load simulation configuration

time = Time.now.strftime('%Y%m%d%H%M%S')


# for each k8s log print summary and evaluate allocation in Kubetwin
k8s_log_files_dir = comparison_conf["k8s_log_files"]
# using [] notation to exclude dirs
k8s_log_files = Dir["#{k8s_log_files_dir}/*.csv"]

i = 1
csv_logs = File.open("comparison_log_#{time}.csv", 'w')
csv_logs << "rps,mean,sd,90th,95th,99th,system\n"
k8s_log_files.each do |log_file|
  puts "#{log_file}"
  # print logs' statistics
  k8s_log = CSV.parse(File.read(log_file), headers: true)
  k8s_ttr = k8s_log.by_col[1].map(&:to_f) # get the ttr column
  mean, std = calcualte_statistics(k8s_ttr)
  csv_logs << "#{i},#{mean},#{std},#{percentile(k8s_ttr, 0.9)},#{percentile(k8s_ttr, 0.95)},#{percentile(k8s_ttr, 0.99)},K8S\n"
  puts "K8S Log: mean: #{mean}, std: #{std}, min: #{k8s_ttr.min} max: #{k8s_ttr.max}"
  # start simulation and check output
  # need to change the request file here
  sim_conf = KUBETWIN::Configuration.load_from_file(simulator_config_file)
  sim_conf.set_rgen(log_file)
  sim = KUBETWIN::KSimulation.new(configuration: sim_conf,
    evaluator: KUBETWIN::Evaluator.new(sim_conf))
  sim_output = sim.evaluate_allocation()
  benchmark = sim_output[0]
  # evaluate bench here
  sim_log = CSV.parse(File.read(benchmark), headers: true)
  sim_ttr = sim_log.by_col[1].map(&:to_f)
  s_mean, s_std = calcualte_statistics(sim_ttr)
  csv_logs << "#{i},#{s_mean},#{s_std},#{percentile(sim_ttr, 0.90)},#{percentile(sim_ttr, 0.95)},#{percentile(sim_ttr, 0.99)},KubeTwin\n"
  puts "KubeTwin Log: mean: #{s_mean}, std: #{s_std}, min: #{sim_ttr.min} max: #{sim_ttr.max}"
  # system( "python3 plot_dists.py #{log_file} #{benchmark} #{i}" )
  # delete simulation logs
  sim_output.each { |f| File.delete(f) }
  i += 1
end

csv_logs.close()
