#!/usr/bin/env ruby

begin
  require 'kube_twin'
  require 'mhl'
  require 'logger'
  require 'pycall'
  require 'pycall/import'
  include PyCall::Import
  require 'csv'
rescue LoadError
  require 'rubygems'
  require 'kube_twin'
  require 'mhl'
end

def do_abort(message)
    abort <<-EOS.gsub(/^\s+\|/, '')
      |#{message}
      |
      |Usage:
      |    #{File.basename(__FILE__)} simulator_config_file 
      |
    EOS
  end
  
  
if File.expand_path(__FILE__) == File.expand_path($0)
    # make sure both required arguments were given
    case ARGV.size
    when 0 then
      do_abort("Missing simulator configuration files!")
    end
  
    # make sure simulator config file exists
    unless File.exists? ARGV[0]
      do_abort("Invalid simulator configuration file!")
    end
end

unless File.exists? ARGV[1]
  do_abort("Invalid dataset log")
end


# pycall import
pyfrom :scipy, import: :stats


# here run the optimizer on the oracle
# load simulation configuration
$logger = Logger.new(STDOUT)
$logger.level = Logger::INFO
time = Time.now.strftime('%Y%m%d%H%M%S')

GA_LOG = "ga_log_oracle_#{time}.log"
File.delete(GA_LOG) if File.exist?(GA_LOG)
ga_logger = Logger.new(GA_LOG)
ga_logger.level = Logger::INFO

sim_conf = KUBETWIN::Configuration.load_from_file(ARGV[0])
msc = sim_conf.microservice_types

# open the log only once
k8s_log = CSV.parse(File.read(ARGV[1]), headers: true)
k8s_ttr = k8s_log.by_col[1] # get the ttr column

microservice_types = sim_conf.microservice_types

$seed = 12345

def encode_replicas_set(x, n_ms)
  w_3 = 1 - x[0] - x[3]
  y = x.clone
  y.insert(6, w_3)
  #puts "#{y}"

  return nil if w_3 < 0 # reject negative probabilities  
  config = { distribution: :mixture, args: 
    ERV::GaussianMixtureHelper.RawParametersToMixtureArgsSeed(*y, $seed)
  }

  return config
end


to_optimize = lambda do |component_allocation|

    res = 0

    # load simulation configuration
    conf = KUBETWIN::Configuration.load_from_file(ARGV[0])
    msc = sim_conf.microservice_types
    processing_time = encode_replicas_set(component_allocation, msc.keys.length)
    
    if processing_time.nil?
      res = 1E+195
    else
      microservice_types['MS1'][:service_time_distribution][:mec] = processing_time
      # create a simulator and launch it
      $logger.debug component_allocation
      sim = KUBETWIN::KSimulation.new(configuration: conf,
                                  evaluator: KUBETWIN::Evaluator.new(conf))
      benchmark = sim.evaluate_allocation(nil, nil, microservice_types)
      sim_log = CSV.parse(File.read(benchmark[0]), headers: true)
      sim_ttr = sim_log.by_col[1]
      if sim_ttr.length < (k8s_ttr.length / 2)
        res = 1E+195
      else
        ks = stats.kstest(sim_ttr, k8s_ttr)
        res = ks.statistic.to_f 
        puts "#{ks}, #{res}"
      end
      File.delete(benchmark[0])
      File.delete(benchmark[1])
      File.delete(benchmark[2]) 
    end


    puts "#{res}"
    -res
end


solver_conf = {
  swarm_size: 40,
  logger: ga_logger,
  constraints: {
    min: [0.0, 1E-5, 1E-5, 0.0, 1E-5, 1E-5, 1E-5, 1E-5],
    max: [ 1.to_f ] * 8,
  },
  exit_condition: lambda {|gen, best | gen > 250 },
  log_level: :info,
}

solver = MHL::QuantumPSOSolver.new(solver_conf)
best = solver.solve(to_optimize, {concurrent: false})

puts best


#ap 'Best result:'
#ap(best, :indent => 2)

puts "exiting"
exit 0

