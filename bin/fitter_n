#!/usr/bin/env ruby

begin
  require 'kube_twin'
  require 'mhl'
  require 'logger'
  require 'pycall'
  require 'pycall/import'
  include PyCall::Import
  require 'csv'
rescue LoadError
  require 'rubygems'
  require 'kube_twin'
  require 'mhl'
end

def do_abort(message)
    abort <<-EOS.gsub(/^\s+\|/, '')
      |#{message}
      |
      |Usage:
      |    #{File.basename(__FILE__)} simulator_config_file testbed_file n
      |
    EOS
  end

if ARGV.length < 3
  do_abort("Uncompleted parameters")
end
  
  
if File.expand_path(__FILE__) == File.expand_path($0)
    # make sure both required arguments were given
    case ARGV.size
    when 0 then
      do_abort("Missing simulator configuration files!")
    end
  
    # make sure simulator config file exists
    unless File.exists? ARGV[0]
      do_abort("Invalid simulator configuration file!")
    end
end

unless File.exists? ARGV[1]
  do_abort("Invalid dataset log")
end

$n = ARGV[2].to_i

# GMM with at least 3 components
#raise "GMM components should be greater than 3" if $n < 3
$params = $n * 3 - 1 # weight mu sigma for each component

# - 1 --> array indexes start from 0
puts "n #{$n} params #{$params}"

# pycall import
pyfrom :scipy, import: :stats
PyCall.import_module("numpy")

# here run the optimizer on the oracle
# load simulation configuration
time = Time.now.strftime('%Y%m%d%H%M%S')
results_dirname = "#{time}_results"
# create directory if it does not exist

Dir.mkdir(results_dirname) unless File.exist?(results_dirname)

GA_LOG = "#{results_dirname}/fitter_log_#{time}_#{$n}.log"

File.delete(GA_LOG) if File.exist?(GA_LOG)
ga_logger = Logger.new(GA_LOG)
ga_logger.level = Logger::INFO

sim_conf = KUBETWIN::Configuration.load_from_file(ARGV[0])
msc = sim_conf.microservice_types

# open the log only once
k8s_log = CSV.parse(File.read(ARGV[1]), headers: true)
k8s_ttr = k8s_log.by_col[1].map(&:to_f) # get the ttr column

# ms1 ttr
k8s_ms1 = CSV.parse(File.read(ARGV[3]), headers: true)
ms1_ttr = k8s_ms1.by_col[0].map(&:to_f) # get the ttr column
puts "MS1: #{ms1_ttr.length} #{ms1_ttr.max} #{ms1_ttr.min}"


# ms2 ttr
k8s_ms2 = CSV.parse(File.read(ARGV[4]), headers: true)
ms2_ttr = k8s_ms2.by_col[0].map(&:to_f) # get the ttr column
puts "MS2: #{ms2_ttr.length} #{ms2_ttr.max} #{ms2_ttr.min}"
puts "TTR: #{k8s_ttr.length} #{k8s_ttr.max} #{k8s_ttr.min}"

$microservice_types = sim_conf.microservice_types
$n_ms = $microservice_types.length
puts "Number of microservices #{$n_ms}"

$seed = 12345

def encode_service_time_conf(x, n_ms)

  config = {}

  #puts "x:#{x}"
  x.each_slice($params).to_a.each_with_index do |ms, msi|
    # [0.15, 15, 30, 0.35, 20, 22, 30, 15] # n = 3 components
    # weights = 0.15, 0.35 

    # get last weight parameter
    w_last = 1
    (0..($params - 3)).select {|pi| pi % 3 == 0}.each do |p| 
      w_last -= ms[p]
    end
    # w_last = 0 if w_last < 0 # reject negative probabilities  
    # or normalize the sum of tha absolute values to 1?
    return nil if w_last < 0

    y = ms.clone
    y.insert($params - 2, w_last)
    
    microservice_name = $microservice_types.keys[msi]

    config[microservice_name] = { distribution: :mixture, args: 
      ERV::GaussianMixtureHelper.RawParametersToMixtureArgsSeed(*y, $seed)
    }
      
  end
  config
end

to_optimize = lambda do |component_allocation|

    res = 0

    # load simulation configuration
    conf = KUBETWIN::Configuration.load_from_file(ARGV[0])
    msc = sim_conf.microservice_types
    processing_time = encode_service_time_conf(component_allocation, msc.keys.length)
    
    if processing_time.nil?
      res = 1E+195
    else
      processing_time.each do |ms_name, ms_time_dist|
        # puts msc
        msc[ms_name][:service_time_distribution][:mec] = ms_time_dist
        # create a simulator and launch it
      end

      sim = KUBETWIN::KSimulation.new(configuration: conf,
                                      evaluator: KUBETWIN::Evaluator.new(conf),
                                      results_dir: results_dirname)
      benchmark, bms1, bms2 = sim.evaluate_allocation(nil, nil, msc)

      # evaluate bench here

      sim_log = CSV.parse(File.read(benchmark), headers: true)
      sim_ttr = sim_log.by_col[1].map(&:to_f)

      ms1_log = CSV.parse(File.read(bms1), headers: true)
      sim_ms1_ttr = ms1_log.by_col[1].map(&:to_f)

      ms2_log = CSV.parse(File.read(bms2), headers: true)
      sim_ms2_ttr = ms2_log.by_col[1].map(&:to_f)

      if sim_ttr.length != k8s_ttr.length
        res = 1E+195
        # puts "#{sim_ttr.length}"
      else
        ks_e2e = stats.kstest(sim_ttr, k8s_ttr)
        ks_ms1 = stats.kstest(sim_ms1_ttr, ms1_ttr)
        ks_ms2 = stats.kstest(sim_ms2_ttr, ms2_ttr)
        
        # fitness function ks for inferencing e2e distribution
        # res = ks_e2e.statistic.to_f
        # fit e2e and ms2 could be a good idea?
        #res = ks_e2e.statistic.to_f #+ ks_ms1.statistic.to_f
        res = ks_e2e.statistic.to_f + ks_ms1.statistic.to_f + ks_ms2.statistic.to_f

        #pop_data = [ms1_ttr.length, sim_ms1_ttr.length].min
        #w_ms1 = stats.mannwhitneyu(ms1_ttr[0, pop_data], sim_ms1_ttr[0, pop_data])
        #w_ms2 = stats.mannwhitneyu(ms2_ttr[0, pop_data], sim_ms2_ttr[0, pop_data])
        #tt_ms1 = stats.ttest_ind(sim_ms1_ttr, ms1_ttr)
        #tt_ms2 = stats.ttest_ind(sim_ms2_ttr, ms2_ttr)
        # add a penalty if ms1 and ms2 do not pass the validation test
        # this constraint makes it harder to converge
        # if tt_ms1.pvalue.to_f < 0.05 || tt_ms2.pvalue.to_f < 0.05
        #  res = 1E+195
        # else
        #  res += ks_e2e.statistic.to_f
        # end

        #res = 0.33 * ks_e2e.statistic.to_f + 0.33 * ks_ms1.statistic.to_f + 0.33 * ks_ms2.statistic.to_f
        
        #puts "sim: #{ks_e2e}, ms1: #{tt_ms1}, ms2: #{tt_ms1}, reqs: #{sim_ttr.length}, res: #{res}" #if penalty == 0
        #puts "sim: #{ks_e2e}, ms1: #{ks_ms1}, ms2: #{ks_ms1}, reqs: #{sim_ttr.length}, res: #{res}" if penalty == 0
      end
      File.delete(benchmark)
      File.delete(bms1)
      File.delete(bms2)
    end

    # puts "#{res}"
    -res
end

solver_conf = {
  #num_swarms: 6,
  swarm_size: 50,
  logger: :stdout,
  constraints: {
    min: ([0.0, 1E-4, 1E-4] * ($n-1) + [1E-4, 1E-4]) * $n_ms, # when latent microservice is there 1E-5 is a good lower bound / otherwise 1E-3 
    max: ([1.0, 0.12, 0.12] * ($n-1) + [0.12, 0.12]) * $n_ms,
  },
  exit_condition: lambda {|gen, best | gen >= 200 },
  log_level: :info,
}

=begin
# backup configuration
min: 
([0.0, 1E-5, 1E-5] * ($n-1) + [1E-5, 1E-5]) + 
([0.0, 0.002, 0.002] * ($n-1) + [0.002, 0.002]) + 
([0.0, 0.01, 0.01] * ($n-1) + [0.01, 0.01]),
# * ($n_ms-1),
max: 
([1.0, 0.08, 0.08] * ($n-1) + [0.08, 0.08]) +
([1.0, 0.07, 0.07] * ($n-1) + [0.07, 0.07]) +
([1.0, 0.11, 0.11] * ($n-1) + [0.11, 0.11]) #* ($n_ms -1),
},    min: 
([0.0, 1E-5, 1E-5] * ($n-1) + [1E-5, 1E-5]) + 
([0.0, 0.002, 0.002] * ($n-1) + [0.002, 0.002]) + 
([0.0, 0.01, 0.01] * ($n-1) + [0.01, 0.01]),
# * ($n_ms-1),
max: 
([1.0, 0.08, 0.08] * ($n-1) + [0.08, 0.08]) +
([1.0, 0.07, 0.07] * ($n-1) + [0.07, 0.07]) +
([1.0, 0.11, 0.11] * ($n-1) + [0.11, 0.11]) #* ($n_ms -1),
},
=end

#solver = MHL::MultiSwarmQPSOSolver.new(solver_conf)
solver = MHL::QuantumPSOSolver.new(solver_conf)
best = solver.solve(to_optimize, {concurrent: false})
puts best



# CODE DUPLICATION HERE __ JUST TO ADD SOME PRINTS
to_bench = lambda do |component_allocation|
  res = 0
  conf = KUBETWIN::Configuration.load_from_file(ARGV[0])
  msc = sim_conf.microservice_types
  processing_time = encode_service_time_conf(component_allocation, msc.keys.length)
  
  if processing_time.nil?
    res = 1E+195
  else

    processing_time.each do |ms_name, ms_time_dist|
      msc[ms_name][:service_time_distribution][:mec] = ms_time_dist
    end

    sim = KUBETWIN::KSimulation.new(configuration: conf,
                                evaluator: KUBETWIN::Evaluator.new(conf))
    benchmark, bms1, bms2 = sim.evaluate_allocation(nil, nil, msc)

    # evaluate bench here

    sim_log = CSV.parse(File.read(benchmark), headers: true)
    sim_ttr = sim_log.by_col[1].map(&:to_f)

    ms1_log = CSV.parse(File.read(bms1), headers: true)
    sim_ms1_ttr = ms1_log.by_col[1].map(&:to_f)

    ms2_log = CSV.parse(File.read(bms2), headers: true)
    sim_ms2_ttr = ms2_log.by_col[1].map(&:to_f)

    if sim_ttr.length < (k8s_ttr.length / 2) ||  sim_ttr.length > (k8s_ttr.length * 3 / 2.to_f)
      res = 1E+195
    else
      ks_e2e = stats.kstest(sim_ttr, k8s_ttr)

      ks_ms1 = stats.kstest(sim_ms1_ttr, ms1_ttr)
      ks_ms2 = stats.kstest(sim_ms2_ttr, ms2_ttr)


      res = ks_e2e.statistic.to_f
      puts "#File: #{benchmark}"
      puts 'Simulated model'
      puts "TTR - mean:#{sim_ttr.sum / sim_ttr.length}"
      puts "e2e: #{ks_e2e}, ms1: #{ks_ms1}, ms2: #{ks_ms2}, #reqs: #{sim_ttr.length}"
    end
  end

  -res
end

to_bench.call(best[:position])

puts "exiting"
exit 0

