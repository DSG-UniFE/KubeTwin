#!/usr/bin/env ruby

begin
  require 'kube_twin'
  require 'logger'
  require 'pycall'
  require 'pycall/import'
  include PyCall::Import
  require 'csv'
rescue LoadError
  require 'rubygems'
  require 'kube_twin'
end

def do_abort(message)
    abort <<-EOS.gsub(/^\s+\|/, '')
      |#{message}
      |
      |Usage:
      |    #{File.basename(__FILE__)} simulator_config_file 
      |
    EOS
  end
  
  
if File.expand_path(__FILE__) == File.expand_path($0)
    # make sure both required arguments were given
    case ARGV.size
    when 0 then
      do_abort("Missing simulator configuration files!")
    end
  
    # make sure simulator config file exists
    unless File.exists? ARGV[0]
      do_abort("Invalid simulator configuration file!")
    end
end

unless File.exists? ARGV[1]
  do_abort("Invalid dataset log")
end

# pycall import
pyfrom :scipy, import: :stats

sim_conf = KUBETWIN::Configuration.load_from_file(ARGV[0])
msc = sim_conf.microservice_types

# open the log only once

k8s_log = CSV.parse(File.read(ARGV[1]), headers: true)
k8s_ttr = k8s_log.by_col[1] # get the ttr column

microservice_types = sim_conf.microservice_types

$seed = 12345

def encode_replicas_set(x, n_ms)
  w_3 = 1 - x[0] - x[3]
  y = x.clone
  y.insert(6, w_3)
  #puts "#{y}"

  return nil if w_3 < 0 # reject negative probabilities  
  config = { distribution: :mixture, args: 
    ERV::GaussianMixtureHelper.RawParametersToMixtureArgsSeed(*y, $seed)
  }

  return config
end

res = 0
component_allocation = 
[0.001409989861132462, 0.013686223535158396, 0.011124094051926525, 0.0005996393428455279, 0.05319846292474652, 0.04849756806235325, 0.04898133615771222, 0.005851341620649107]

# load simulation configuration
conf = KUBETWIN::Configuration.load_from_file(ARGV[0])
msc = sim_conf.microservice_types
processing_time = encode_replicas_set(component_allocation, msc.keys.length)
  
if processing_time.nil?
  res = 1E+195
else
  microservice_types['MS1'][:service_time_distribution][:mec] = processing_time
  puts "#{processing_time}"
  # create a simulator and launch it
  sim = KUBETWIN::KSimulation.new(configuration: conf,
                              evaluator: KUBETWIN::Evaluator.new(conf))
  benchmark = sim.evaluate_allocation(nil, nil, microservice_types)
  sim_log = CSV.parse(File.read(benchmark[0]), headers: true)
  sim_ttr = sim_log.by_col[1]
  if sim_ttr.length < (k8s_ttr.length / 2)
    puts "Not enough requests"
  else
    ks = stats.kstest(sim_ttr, k8s_ttr)
    res = ks.statistic.to_f 
    puts "#{ks}, #{res}"
    puts "Sim: requests: #{sim_ttr.length}}"
  end
end

puts "exiting"
exit 0

