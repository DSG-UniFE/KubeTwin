#!/usr/bin/env ruby

begin
  require 'kube_twin'
  require 'kube_twin/evaluation'
rescue LoadError
  require 'rubygems'
  require 'kube_twin'
  require 'kube_twin/evaluation'
end


def do_abort(message)
  abort <<-EOS.gsub(/^\s+\|/, '')
    |#{message}
    |
    |Usage:
    |    #{File.basename(__FILE__)} simulator_config_file 
    |
  EOS
end


if File.expand_path(__FILE__) == File.expand_path($0)
  # make sure both required arguments were given
  case ARGV.size
  when 0 then
    do_abort("Missing simulator configuration files!")
  end

  # make sure simulator config file exists
  unless File.exist? ARGV[0]
    do_abort("Invalid simulator configuration file!")
  end

  if ARGV.size > 1 && !ARGV[1].nil?
    env_id = ARGV[1]
  else
    env_id = 1
  end

  if ARGV.size > 2 && !ARGV[2].nil?
    node_per_cluster = ARGV[2]
  else
    node_per_cluster = 0
  end

  # load simulation configuration
  conf = KUBETWIN::Configuration.load_from_file(ARGV[0])
  puts "BIN: ENV ID: #{env_id} NODE PER CLUSTER: #{node_per_cluster}"
  conf.env_id = env_id
  conf.node_per_cluster = node_per_cluster

  # load vm allocation√ü
  # keep track of this for futre references
  # vm_allocation = eval(File.read(ARGV[1]))

  # create a simulator and launch it
  sim = KUBETWIN::KSimulation.new(configuration: conf,
                              evaluator: KUBETWIN::Evaluator.new(conf))
  res = sim.evaluate_allocation()

  # Print results
  puts 'Result:'
  puts res
end
