#!/usr/bin/env ruby

begin
  require 'kube_twin'
  require 'mhl'
  require 'logger'
  require 'pycall'
  require 'pycall/import'
  include PyCall::Import
  require 'csv'
rescue LoadError
  require 'rubygems'
  require 'kube_twin'
  require 'mhl'
end

def do_abort(message)
    abort <<-EOS.gsub(/^\s+\|/, '')
      |#{message}
      |
      |Usage:
      |    #{File.basename(__FILE__)} simulator_config_file testbed_file n
      |
    EOS
  end

if ARGV.length < 3
  do_abort("Uncompleted parameters")
end
  
  
if File.expand_path(__FILE__) == File.expand_path($0)
    # make sure both required arguments were given
    case ARGV.size
    when 0 then
      do_abort("Missing simulator configuration files!")
    end
  
    # make sure simulator config file exists
    unless File.exists? ARGV[0]
      do_abort("Invalid simulator configuration file!")
    end
end

unless File.exists? ARGV[1]
  do_abort("Invalid dataset log")
end

$n = ARGV[2].to_i

raise "GMM components should be greater than 3" if $n < 3

$params = $n * 3 - 1 # weight mu sigma for each component
# - 1 --> array indexes start from 0

puts "n #{$n} params #{$params}"

# pycall import
pyfrom :scipy, import: :stats

# here run the optimizer on the oracle
# load simulation configuration
time = Time.now.strftime('%Y%m%d%H%M%S')

GA_LOG = "fitter_log_#{time}_#{$n}.log"

File.delete(GA_LOG) if File.exist?(GA_LOG)
ga_logger = Logger.new(GA_LOG)
ga_logger.level = Logger::INFO

sim_conf = KUBETWIN::Configuration.load_from_file(ARGV[0])
msc = sim_conf.microservice_types

# open the log only once
k8s_log = CSV.parse(File.read(ARGV[1]), headers: true)
k8s_ttr = k8s_log.by_col[1].map(&:to_f) # get the ttr column

# ms1 ttr
k8s_ms1 = CSV.parse(File.read(ARGV[3]), headers: true)
ms1_ttr = k8s_ms1.by_col[0].map(&:to_f) # get the ttr column
puts "MS1: max: #{ms1_ttr.max} min: #{ms1_ttr.min} #{ms1_ttr.sum / ms1_ttr.length}"

# ms2 ttr
k8s_ms2 = CSV.parse(File.read(ARGV[4]), headers: true)
ms2_ttr = k8s_ms2.by_col[0].map(&:to_f) # get the ttr column
# ms2_ttr = ms2_ttr.select{|e| ! e.nil?}.collect {|e| e * 1E3}
puts "MS2: max: #{ms2_ttr.max} min: #{ms2_ttr.min} #{ms2_ttr.sum / ms2_ttr.length}"

puts "TTR: max: #{k8s_ttr.max} min: #{k8s_ttr.min} mean: #{k8s_ttr.sum / k8s_ttr.length}"


$microservice_types = sim_conf.microservice_types
$n_ms = $microservice_types.length

puts "Number of microservices #{$n_ms}"

$seed = 12345

def encode_service_time_conf(x, n_ms)

  # for each micro-servce
  config = {}

  #puts "x:#{x}"

  x.each_slice($params).to_a.each_with_index do |ms, msi|

    #puts "Microservice: #{msi}"
    #puts "Microservice: #{ms}"
    #msi_istart = msi
    #msi_iend = msi * $params - $n # n is the number of component for the GMM

    w_last = 1
    (0..($params - 3)).select {|pi| pi % 3 == 0}.each do |p| 
      w_last -= ms[p]
    end

    # w_last = 0 if w_last < 0 # reject negative probabilities  
    # or normalize the sum of tha absolute values to 1?
    return nil if w_last < 0

    #puts "ms gmm parameters: #{ms}"
    # clone the component allocation
    y = ms.clone
    y.insert($params - 2, w_last)
    # add w_last in its position
    #puts "y gmm parameters: #{y}"

    #puts $microservice_types
    microservice_name = $microservice_types.keys[msi]
    #puts "msn #{microservice_name}"
    config[microservice_name] = { distribution: :mixture, args: 
      ERV::GaussianMixtureHelper.RawParametersToMixtureArgsSeed(*y, $seed)
    }
    
     #puts config
  end
  config
end


res = 0


component_allocation = 
[0.015407114300243071, 0.007160269823213679, 0.0063682261762834785, 0.002503462772233637, 0.02227133015322898, 0.03717479609753065, 0.005012309274568196, 0.011037426320116384, 0.3751931244301556, 0.006910477307608723, 0.0036099000885854195, 0.01807061450366952, 0.016116386025725384, 0.11568954739239289, 0.004718772854840048, 0.008497677046634683]
=begin
[0.023940459464088286, 0.005880651189512844, 0.00013928662313746374, 0.00052147095216898, 0.03500274239177324, 0.023749806891056872, 0.012550445803844562, 0.0034293087690246246, 3.361680883076164e-05, 0.003894808357086982, 0.00245398961182265, 1.4126752809254485e-05, 0.001694947746554669, 0.021278658471727288, 0.032099833111319274, 0.004599139250532173] # from laptop
# during optimization wasserstein minimization
=begin
[0.0019586074640051973, 0.010274723366027092, 0.007914800308488004, 0.04861382277738807, 0.005468016140072126, 0.010620554561758979, 0.011853175610926277, 0.0020456177364108156, 0.027291685310072415, 0.006288560271720742, 0.00030089515062857995, 0.16270465767724562, 0.030977347396476666, 0.005928885142879029, 0.03924257346055737, 0.0027626016720562877] # using log from Bologna
# -- got the best while the optimizator was still running # using fitter n e2e + ms1
=begin
[0.03550561681687546, 0.029537688330356852, 0.002906824397576885, 0.034004797172083545, 1.0e-05, 1.0e-05, 0.0022689316989755247, 1.0e-05, 0.0, 1.0e-05, 1.0e-05, 0.10038721003140869, 1.0e-05, 1.0e-05, 0.00874747334534559, 0.0003273199490742946, 0.01965755884888197, 1.0e-05, 1.0e-05, 0.014849241431912194, 1.0e-05, 0.003948596163157358, 0.0012683014328679233, 1.0e-05] # 100 iterations of fitter_n with latent service (optimizing on 2e) --> not converging -- the number of iteration is too small (wilcoxon test ok) distribution is quite similar --
=begin
[0.005387660476312596, 0.07762452815740623, 0.0014984787265835255, 0.23791527925231498, 0.03561224232717422, 0.0010721995915870606, 0.005788646371430393, 0.0012591851054053684, 0.004817428085764925, 0.001, 0.010339138643459584, 0.046317698880597405, 0.007307291362900213, 0.014240731482997884, 0.016958253799505454, 0.038873591306180205]
=begin
[0.035857377396563965, 0.0018513962927022125, 0.0010042509526907758, 0.005530734358330179, 0.060927382625199686, 0.001, 0.09189875430917686, 0.008935973873482099, 0.09460068877361102, 0.0031268301050726417, 0.006416600177066326, 0.005134605468153077, 0.0030425243533684235, 0.002818617621291373, 0.001572851063872367, 0.0014970531762878551]
=begin
[0.0021295182602727915, 0.002426589409158516, 0.004428861860044794, 0.1174664570274882, 0.015713350586408138, 0.0015866966723499143, 0.001, 0.007002265888021498, 0.10116053224415975, 0.01487927506478582, 0.007258994462894669, 0.01888480521636353, 0.001, 0.001, 0.002261540294303827, 0.0012293504965815677, 0.011626663257023086, 0.0019069420275425102, 0.0010026486751179688, 2.493296812451423e-05, 0.02072437502951062, 0.003834698948833367, 0.020055051124881162, 0.02662292748471568]
=begin
[0.04932829667868047, 0.007390945404034557, 0.0008308023633286156, 0.02458540130926296, 0.00322296141816395, 0.0012528021985325549, 
  0.006833316316521813, 0.001451463764516268, 0.010227124178935856, 0.00030469215059061893, 0.001067224375498713, 0.007435011420957829, 
  0.015664717202479386, 0.01193071603509299, 0.0059312816229835155, 0.0005747817708497177, 0.3915737944063387, 0.02552249166978343, 
  0.0007087773452109161, 0.3464275625267521, 0.026882998142091424, 0.002089216796529277, 0.04129928418197162, 0.00044897345444040444]
=begin
[0.004226792692725739, 0.021269823094957983, 0.010939133045965584, 0.19945064289985634, 0.00649792928262739, 0.001013741877896245, 0.0048742653328895475, 1.0e-05, 0.0019969156916502077, 0.020488197406720993, 0.0001052303033019805, 0.0012854098371261448, 0.0018531931139184657, 0.015050721669347615, 0.006033563986403702, 0.0007234588978425779, 0.007849032735758269, 0.04041633964099989, 0.01559341745616441, 0.7464452311031102, 0.025746231599144482, 0.0011205157275963628, 0.02796713644326968, 0.00301431021609591]
=end
# load simulation configuration
conf = KUBETWIN::Configuration.load_from_file(ARGV[0])
msc = sim_conf.microservice_types

processing_time = encode_service_time_conf(component_allocation, msc.keys.length)

if processing_time.nil?
  res = 1E+195
else
  processing_time.each do |ms_name, ms_time_dist|
    # puts msc
    msc[ms_name][:service_time_distribution][:mec] = ms_time_dist
    # create a simulator and launch it
  end
end

puts "#{msc}"

#puts msc

sim = KUBETWIN::KSimulation.new(configuration: conf,
                            evaluator: KUBETWIN::Evaluator.new(conf))
                            
benchmark, bms1, bms2 = sim.evaluate_allocation(nil, nil, msc)

# evaluate bench here

sim_log = CSV.parse(File.read(benchmark), headers: true)
sim_ttr = sim_log.by_col[1].map(&:to_f)

ms1_log = CSV.parse(File.read(bms1), headers: true)
sim_ms1_ttr = ms1_log.by_col[1].map(&:to_f)

ms2_log = CSV.parse(File.read(bms2), headers: true)
sim_ms2_ttr = ms2_log.by_col[1].map(&:to_f)

unless sim_ttr.length < (k8s_ttr.length / 2) ||  sim_ttr.length > (k8s_ttr.length * 3 / 2.to_f)

  puts 'Simulated model'
  puts  "TTR - mean:#{sim_ttr.sum / sim_ttr.length}"
  puts  "MS1 - mean:#{sim_ms1_ttr.sum / sim_ms1_ttr.length} min: #{sim_ms1_ttr.min} max: #{sim_ms1_ttr.max}"
  puts  "MS2 - mean:#{sim_ms2_ttr.sum / sim_ms2_ttr.length} min: #{sim_ms2_ttr.min} max: #{sim_ms2_ttr.max}"

  ks_e2e = stats.kstest(sim_ttr, k8s_ttr)
  ks_ms1 = stats.kstest(sim_ms1_ttr, ms1_ttr)
  ks_ms2 = stats.kstest(sim_ms2_ttr, ms2_ttr)
  #tt_ms1 = stats.ttest_ind(sim_ms1_ttr, ms1_ttr)
  #tt_ms2 = stats.ttest_ind(sim_ms2_ttr, ms2_ttr)

  # add a penalty if ms1 and ms2 do not pass the validation test

  res = ks_e2e.statistic.to_f
  puts "sim: #{ks_e2e}, ms1: #{ks_ms1}, ms2: #{ks_ms2}, reqs: #{sim_ttr.length}, res: #{res}"
end

puts "exiting"
exit 0