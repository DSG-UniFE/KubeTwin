#!/usr/bin/env ruby

begin
  require 'kube_twin'
  require 'mhl'
  require 'logger'
  require 'pycall'
  require 'pycall/import'
  include PyCall::Import
  require 'csv'
rescue LoadError
  require 'rubygems'
  require 'kube_twin'
  require 'mhl'
end

def do_abort(message)
    abort <<-EOS.gsub(/^\s+\|/, '')
      |#{message}
      |
      |Usage:
      |    #{File.basename(__FILE__)} simulator_config_file testbed_file n
      |
    EOS
  end

if ARGV.length < 3
  do_abort("Uncompleted parameters")
end
  
  
if File.expand_path(__FILE__) == File.expand_path($0)
    # make sure both required arguments were given
    case ARGV.size
    when 0 then
      do_abort("Missing simulator configuration files!")
    end
  
    # make sure simulator config file exists
    unless File.exists? ARGV[0]
      do_abort("Invalid simulator configuration file!")
    end
end

unless File.exists? ARGV[1]
  do_abort("Invalid dataset log")
end

$n = ARGV[2].to_i

raise "GMM components should be greater than 3" if $n < 3

$params = $n * 3 - 1 # weight mu sigma for each component
# - 1 --> array indexes start from 0

puts "n #{$n} params #{$params}"

# pycall import
pyfrom :scipy, import: :stats

# here run the optimizer on the oracle
# load simulation configuration
time = Time.now.strftime('%Y%m%d%H%M%S')

GA_LOG = "fitter_log_#{time}_#{$n}.log"

File.delete(GA_LOG) if File.exist?(GA_LOG)
ga_logger = Logger.new(GA_LOG)
ga_logger.level = Logger::INFO

sim_conf = KUBETWIN::Configuration.load_from_file(ARGV[0])
msc = sim_conf.microservice_types

# open the log only once
k8s_log = CSV.parse(File.read(ARGV[1]), headers: true)
k8s_ttr = k8s_log.by_col[1].map(&:to_f) # get the ttr column

# ms1 ttr
k8s_ms1 = CSV.parse(File.read(ARGV[3]), headers: true)
ms1_ttr = k8s_ms1.by_col[0].map(&:to_f) # get the ttr column
puts "MS1: #{ms1_ttr.length} #{ms1_ttr.max} #{ms1_ttr.min}"


# ms2 ttr
k8s_ms2 = CSV.parse(File.read(ARGV[4]), headers: true)
ms2_ttr = k8s_ms2.by_col[0].map(&:to_f) # get the ttr column
# ms2_ttr = ms2_ttr.select{|e| ! e.nil?}.collect {|e| e * 1E3}
puts "MS2: #{ms2_ttr.length} #{ms2_ttr.max} #{ms2_ttr.min}"

puts "TTR: #{k8s_ttr.length} #{k8s_ttr.max} #{k8s_ttr.min}"


$microservice_types = sim_conf.microservice_types
$n_ms = $microservice_types.length

puts "Number of microservices #{$n_ms}"

$seed = 12345

def encode_replicas_set(x, n_ms)
  # for each micro-servce
  config = {}

  x.each_slice($params).to_a.each_with_index do |ms, msi|

    w_last = 1
    (0..($params - 3)).select {|pi| pi % 3 == 0}.each do |p| 
      #puts "#{ms[p]}"
      w_last -= ms[p]
    end

    #puts "w_last #{w_last}"

    w_last = 0 if w_last < 0 # reject negative probabilities  
    #return nil if w_last < 0

    y = ms.clone
    y.insert($params - 2, w_last)
    microservice_name = $microservice_types.keys[msi]
    #puts "msn #{microservice_name}"
    config[microservice_name] = { distribution: :mixture, args: 
      ERV::GaussianMixtureHelper.RawParametersToMixtureArgsSeed(*y, $seed)
    }
    
     #puts config
  end
  config
end

res = 0


component_allocation = [0.0008265701236908648, 0.0016218975326823277, 0.00022492086080002843, 0.0001469800285616201, 0.002042391261112779, 1.0e-05, 0.00937374423474558, 0.00011064382475793867, 0.02614550768158809, 0.035242859108980264, 0.004053918871825929, 0.026045671070400914, 0.000561561038240109, 0.02061265556605741, 0.0015357580207123263, 0.003157913429635669, 2.1551204150587556e-05, 0.001275517177418091, 0.009983699539898043, 0.008112298798064372, 0.026666546169414503, 0.030581800316968347, 0.026826583605140536, 0.0010328911338680462]

# load simulation configuration
conf = KUBETWIN::Configuration.load_from_file(ARGV[0])
msc = sim_conf.microservice_types

processing_time = encode_replicas_set(component_allocation, msc.keys.length)

if processing_time.nil?
  res = 1E+195
else
  processing_time.each do |ms_name, ms_time_dist|
    # puts msc
    msc[ms_name][:service_time_distribution][:mec] = ms_time_dist
    # create a simulator and launch it
  end
end

#puts msc

sim = KUBETWIN::KSimulation.new(configuration: conf,
                            evaluator: KUBETWIN::Evaluator.new(conf))
                            
benchmark, bms1, bms2 = sim.evaluate_allocation(nil, nil, msc)

# evaluate bench here

sim_log = CSV.parse(File.read(benchmark), headers: true)
sim_ttr = sim_log.by_col[1].map(&:to_f)

ms1_log = CSV.parse(File.read(bms1), headers: true)
sim_ms1_ttr = ms1_log.by_col[1].map(&:to_f)

ms2_log = CSV.parse(File.read(bms2), headers: true)
sim_ms2_ttr = ms2_log.by_col[1].map(&:to_f)

unless sim_ttr.length < (k8s_ttr.length / 2) ||  sim_ttr.length > (k8s_ttr.length * 3 / 2.to_f)

  ks_e2e = stats.kstest(sim_ttr, k8s_ttr)

  #ks_ms1 = stats.kstest(sim_ms1_ttr, ms1_ttr)
  #ks_ms2 = stats.kstest(sim_ms2_ttr, ms2_ttr)
  tt_ms1 = stats.ttest_ind(sim_ms1_ttr, ms1_ttr)
  tt_ms2 = stats.ttest_ind(sim_ms2_ttr, ms2_ttr)

  # add a penalty if ms1 and ms2 do not pass the validation test

  penalty = 0
  penalty += 1 if tt_ms1.pvalue.to_f < 0.05 # ms1
  penalty += 1 if tt_ms2.pvalue.to_f < 0.05 # ms2

  res = ks_e2e.statistic.to_f + penalty

  #res = 0.33 * ks_e2e.statistic.to_f + 0.33 * ks_ms1.statistic.to_f + 0.33 * ks_ms2.statistic.to_f
  puts "sim: #{ks_e2e}, ms1: #{tt_ms1}, ms2: #{tt_ms1}, reqs: #{sim_ttr.length}, res: #{res}"
end

puts "exiting"
exit 0