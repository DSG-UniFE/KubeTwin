#!/usr/bin/env ruby


require 'kube_twin'
require 'json'
require 'logger'
require 'csv'
require 'socket'
require 'pycall'
require 'pycall/import'
include PyCall::Import

$n = 3

$params = $n * 3 - 1 # weight mu sigma for each component
SIM_FILE = "examples/sm-c1-1000-gv.conf"
K8S_LOG = "req_logs_august.csv"
MS1_LOG = "ms1-960-red.txt"
MS2_LOG = "ms2-960-red.txt"
# - 1 --> array indexes start from 0
puts "n #{$n} params #{$params}"


# pycall import
pyfrom :scipy, import: :stats
PyCall.import_module("numpy")

# here run the optimizer on the oracle
# load simulation configuration
time = Time.now.strftime('%Y%m%d%H%M%S')

results_dirname = "#{time}_results"
# create directory if it does not exist

Dir.mkdir(results_dirname) unless File.exist?(results_dirname)

GA_LOG = "#{results_dirname}/fitter_log_#{time}_#{$n}.log"


$sim_conf = KUBETWIN::Configuration.load_from_file(SIM_FILE)
msc = $sim_conf.microservice_types

# open the log only once
k8s_log = CSV.parse(File.read(K8S_LOG), headers: true)
k8s_ttr = k8s_log.by_col[1].map(&:to_f) # get the ttr column

# ms1 ttr
k8s_ms1 = CSV.parse(File.read(MS1_LOG), headers: true)
ms1_ttr = k8s_ms1.by_col[0].map(&:to_f) # get the ttr column
puts "MS1: #{ms1_ttr.length} max #{ms1_ttr.max} min #{ms1_ttr.min} mean: #{ms1_ttr.sum / ms1_ttr.length}}"
# ms2 ttr
k8s_ms2 = CSV.parse(File.read(MS2_LOG), headers: true)
ms2_ttr = k8s_ms2.by_col[0].map(&:to_f) # get the ttr column
# ms2_ttr = ms2_ttr.select{|e| ! e.nil?}.collect {|e| e * 1E3}
puts "MS2: #{ms2_ttr.length} #{ms2_ttr.max} #{ms2_ttr.min} mean: #{ms2_ttr.sum / ms2_ttr.length}"
puts "TTR: #{k8s_ttr.length} #{k8s_ttr.max} #{k8s_ttr.min}"


$microservice_types = $sim_conf.microservice_types
$n_ms = $microservice_types.length

puts "Number of microservices #{$n_ms}"

$seed = 12345

def encode_service_time_conf(x, n_ms)

  # for each micro-servce
  config = {}

  #puts "x:#{x}"

  x.each_slice($params).to_a.each_with_index do |ms, msi|

    w_last = 1
    (0..($params - 3)).select {|pi| pi % 3 == 0}.each do |p| 
      w_last -= ms[p]
    end

    return nil if w_last < 0

    y = ms.clone
    y.insert($params - 2, w_last)

    microservice_name = $microservice_types.keys[msi]
    config[microservice_name] = { distribution: :mixture, args: 
      ERV::GaussianMixtureHelper.RawParametersToMixtureArgsSeed(*y, $seed)
    }
  end
  config
end

fitting_function = lambda do |component_allocation|


  msc = $sim_conf.microservice_types
  processing_time = encode_service_time_conf(component_allocation, msc.keys.length)
  res = 0
  penalty = 0
  
  if processing_time.nil?
    penalty += 1E8
  else
    processing_time.each do |ms_name, ms_time_dist|
      msc[ms_name][:service_time_distribution][:mec] = ms_time_dist
    end
      
    sim = KUBETWIN::KSimulation.new(configuration: $sim_conf,
                                    evaluator: KUBETWIN::Evaluator.new($sim_conf),
                                    results_dir: results_dirname)
    benchmark, bms1, bms2 = sim.evaluate_allocation(nil, nil, msc)

    sim_log = CSV.parse(File.read(benchmark), headers: true)
    sim_ttr = sim_log.by_col[1].map(&:to_f)

    if sim_ttr.length != k8s_ttr.length
      penalty += 1E8
    else
      begin

        w_e2e = stats.wilcoxon(k8s_ttr, sim_ttr)

        ev = k8s_ttr.length * (k8s_ttr.length + sim_ttr.length - 1) / 2.0

        if w_e2e.pvalue.to_f >= 0.05
          puts "Reqs: #{sim_ttr.length} W statistic: #{w_e2e.statistic.to_f} pvalue: #{w_e2e.pvalue.to_f} ev: #{ev} #{(w_e2e.statistic.to_f - ev).abs}" 
          #res = (w_e2e.statistic.to_f - ev).abs
        else 
          penalty += 1E8
        end

        res = w_e2e.statistic.to_f
      rescue => e
        puts("Rescued execption #{e}")
        penalty += 1E8
      end
    end
    File.delete(benchmark)
    File.delete(bms1)
    File.delete(bms2)
  end
  res += penalty

  -res
end


server = TCPServer.new 5678

while session = server.accept
  conf = session.gets
  while conf != nil
    econf = eval(conf)
    #puts "#{econf}"
    res = fitting_function.call(econf)
    puts "#{res}"
    session.puts "#{res}"
    conf = session.gets
  end
  # close the session here
  session.close
end


