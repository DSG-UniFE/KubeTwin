start_time DateTime.civil(2020,5,28,0,0,0).to_time
warmup_duration 10.seconds
cooldown_duration 10.seconds

duration 10000.seconds
seeds \
	{communication_latencies 12345}
stats_print_interval 1

seed 12345
    
clusters \
	one:	{
		name: "cluster1",
		location_id: 1, # is hardcoded,
		type: :mec, # is hardcoded
		tier: "local", # is hardcoded
		node_number: 50,
		node_resources_cpu: 4,
		node_resources_memory: 12,
	},
	two:	{
		name: "cluster2",
		location_id: 2, # is hardcoded,
		type: :mec, # is hardcoded
		tier: "local", # is hardcoded
		node_number: 50,
		node_resources_cpu: 8,
		node_resources_memory: 16,
	}


latency_models \
    [
        # 0 end-user location
        [
        # 0 0 -- end-user end-user (not used)
        {
            distribution: :gaussian,
            args:  {
            mean:         0.00301,
            sd:           0.00142
            },
        },
        # 0 1 -- end-user- eu-south-1
        {
            distribution: :mixture,
            args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
            33, 9.24E-6, 1.69E-6, 33, 10.87E-6, 1.73E-6, 33, 11.19E-6, 1.40E-6)
        },
        # 0 2 end-user - eu-central-1
        {
            distribution: :gaussian,
            args:  {
            mean:         0.0126,
            sd:           0.00582
            },
        },
        # 0 3 end-user - eu-west-3
        {
            distribution: :gaussian,
            args:  {
            mean:         0.01980,
            sd:           0.00195
            },
        },
        # 0 4 end-user - eu-west-2
        {
            distribution: :gaussian,
            args:  {
            mean:         0.02658,
            sd:           0.00205
            },
        },
        # 0 5 end-user - eu-north-1
        {
            distribution: :gaussian,
            args:  {
            mean:         0.03228,
            sd:           0.00643
            },
        },
        # 0 6 end-user - ca-central-1
        {
            distribution: :gaussian,
            args:  {
            mean:         0.10455,
            sd:           0.00673
            },
        },
        # 0 7 end-user - us-east-1
        {
            distribution: :gaussian,
            args:  {
            mean:         0.10013,
            sd:           0.00189
            },
        },
        ],
        # 1
        [
        # 1 1 -- eu-south-1 - eu-south-1 (intra)
        {
            distribution: :mixture,
            args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
            33, 9.24E-6, 1.69E-6, 33, 10.87E-6, 1.73E-6, 33, 11.19E-6, 1.40E-6)
        },
        # 1 2 eu-south-1 - eu-central-1
        {
            distribution: :gaussian,
            args:  {
            mean:         0.01260,
            sd:           0.00582
            },
        },
        # 1 3 eu-south-1 - eu-west-3
        {
            distribution: :gaussian,
            args:  {
            mean:         0.01980,
            sd:           0.00195
            },
        },
        # 1 4 eu-south-1 - eu-west-2
        {
            distribution: :gaussian,
            args:  {
            mean:         0.02658,
            sd:           0.00205
            },
        },
        # 1 5 eu-south-1 - eu-north-1
        {
            distribution: :gaussian,
            args:  {
            mean:         0.03228,
            sd:           0.00643
            },
        },
        # 1 6 eu-south-1 - ca-central-1
        {
            distribution: :gaussian,
            args:  {
            mean:         0.10455,
            sd:           0.00673
            },
        },
        # 1 7 eu-south-1 - us-east-1
        {
            distribution: :gaussian,
            args:  {
            mean:         0.10013,
            sd:           0.00189
            },
        },
        ],
        # location :2
        [
        #  2 2 eu-central-1 - eu-central-1 (intra)
        {
            distribution: :mixture,
            args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
            33, 9.24E-6, 1.69E-6, 33, 10.87E-6, 1.73E-6, 33, 11.19E-6, 1.40E-6)
        },
        # 2 3 eu-central-1 - eu-west-3
        {
            distribution: :gaussian,
            args:  {
            mean:         0.01053,
            sd:           0.00213
            },
        },
        # 2 4 eu-central-1 - eu-west-2
        {
            distribution: :gaussian,
            args:  {
            mean:         0.01634,
            sd:           0.00182
            },
        },
        # 2 5 eu-central-1 - eu-north-1
        {
            distribution: :gaussian,
            args:  {
            mean:         0.02316,
            sd:           0.00318
            },
        },
        # 2 6 eu-central-1 - ca-central-1
        {
            distribution: :gaussian,
            args:  {
            mean:         0.09461,
            sd:           0.00646
            },
        },
        # 2 7 eu-central-1 - us-east-1
        {
            distribution: :gaussian,
            args:  {
            mean:         0.09108,
            sd:           0.00205
            },
        },
        ],
        # location 3
        [
        # 3 3 eu-west-3 - eu-west-3 (intra)
        {
            distribution: :mixture,
            args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
            33, 9.24E-6, 1.69E-6, 33, 10.87E-6, 1.73E-6, 33, 11.19E-6, 1.40E-6)
        },
        # 3 4 eu-west-3 - eu-west-2
        {
            distribution: :gaussian,
            args:  {
            mean:         0.01027,
            sd:           0.00193
            },
        },
        # 3 5 eu-west-3 - eu-north-1
        {
            distribution: :gaussian,
            args:  {
            mean:         0.03058,
            sd:           0.00392
            },
        },
        # 3 6 eu-west-3 - ca-central-1
        {
            distribution: :gaussian,
            args:  {
            mean:         0.08764,
            sd:           0.00619
            },
        },
        # 3 7 eu-west-3 - us-eaast-1
        {
            distribution: :gaussian,
            args:  {
            mean:         0.08341,
            sd:           0.00175
            },
        },
        ],
        # location 4
        [
        # 4 4 eu-west-2 - eu-west-2 (intra)
        {
            distribution: :mixture,
            args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
            33, 9.24E-6, 1.69E-6, 33, 10.87E-6, 1.73E-6, 33, 11.19E-6, 1.40E-6)
        },
        # 4 5 eu-west-2 - eu-north-1
        {
            distribution: :gaussian,
            args:  {
            mean:         0.03281,
            sd:           0.00219
            },
        },
        # 4 6 eu-west-2 - ca-central-1
        {
            distribution: :gaussian,
            args:  {
            mean:         0.08073,
            sd:           0.00613
            },
        },
        # 4 7 eu-west-2 - us-east-1
        {
            distribution: :gaussian,
            args:  {
            mean:         0.07812,
            sd:           0.00640
            },
        },
        ],
        # location 5
        [
        # 5 5 eu-north-1 - eu-north-1 (intra)
        {
            distribution: :mixture,
            args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
            33, 9.24E-6, 1.69E-6, 33, 10.87E-6, 1.73E-6, 33, 11.19E-6, 1.40E-6)
        },
        # 5 6 eu-north-1 - ca-central-1
        {
            distribution: :gaussian,
            args:  {
            mean:         0.11059,
            sd:           0.00708
            },
        },
        # 5 7 eu-north-1 - us-east-1
        {
            distribution: :gaussian,
            args:  {
            mean:         0.10856,
            sd:           0.00269
            },
        },
        ],
        # location 6
        [
        # 6 6 ca-central-1 ca-central-1 (intra)
        {
            distribution: :mixture,
            args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
            33, 9.24E-6, 1.69E-6, 33, 10.87E-6, 1.73E-6, 33, 11.19E-6, 1.40E-6)
        },
        # 6 7 ca-central-1 - us-east-1
        {
            distribution: :gaussian,
            args:  {
            mean:         0.01766,
            sd:           0.00655
            },
        },
        ],
        # location 7
        [
        # 7 7 us-east-1 - us-east-1 (intra)
        {
            distribution: :mixture,
            args: ERV::GaussianMixtureHelper.RawParametersToMixtureArgs(
            33, 9.24E-6, 1.69E-6, 33, 10.87E-6, 1.73E-6, 33, 11.19E-6, 1.40E-6)
        },
        ]
    ]
        
    
        
customers \
    1 => { location_id: 0 }
    
    
request_gen \
1 => {
    workflow_types: 1,
    # request_distribution: {distribution: :exponential, args: { rate: 1 / 0.03766478342749529, seed: seed }},
    starting_time: start_time,
    request_distribution: {distribution: :exponential, args: { rate: 100, seed: seed }},
    num_requests: 10000,
    num_customers: 1
}


=begin
1 => {
    workflow_types: 1,
    # request_distribution: {distribution: :exponential, args: { rate: 1 / 0.03766478342749529, seed: seed }},
    starting_time: start_time,
    request_distribution: {distribution: :exponential, args: { rate: 100, seed: seed }},
    num_requests: 10000,
    num_customers: 1
},
2 => {
    workflow_types: 1,
    # request_distribution: {distribution: :exponential, args: { rate: 1 / 0.03766478342749529, seed: seed }},
    starting_time: start_time + 20.seconds,
    request_distribution: {distribution: :exponential, args: { rate: 75, seed: seed }},
    num_requests: 6000,
    num_customers: 1
},
3 => {
    workflow_types: 1,
    # request_distribution: {distribution: :exponential, args: { rate: 1 / 0.03766478342749529, seed: seed }},
    starting_time: start_time + 30.seconds,
    request_distribution: {distribution: :exponential, args: { rate: 15, seed: seed }},
    num_requests: 2000,
    num_customers: 1
}
=end


microservice_types \
	"my_solver" =>	{
		:service_time_distribution=>{
			:mec=> {distribution: :gaussian, args: {mean: 0.01143607, sd: 0.00301789, seed: seed}}, # at the moment is hardocoded
			:cloud=>{:distribution=>:gaussian, :args=>{:mean=>0.053011, :sd=>0.006149, :seed=>12345}} # at the moment is hardocoded
		},
		:resources_requirements_cpu=>1,
		:resources_requirements_memory=>1,
		:node_affinity=>"local", # at the moment is hardocoded
		# :mdn_file=>"placeholder!!!", # write the path of your model
		:rps=>100, # at the moment is hardcode (change if is necessary)
		:wait_for=>["georef_module, sert"]
	},
	"georef_module" =>	{
		:service_time_distribution=>{
			:mec=> {distribution: :gaussian, args: {mean: 0.01143607, sd: 0.00301789, seed: seed}}, # at the moment is hardocoded
			:cloud=>{:distribution=>:gaussian, :args=>{:mean=>0.053011, :sd=>0.006149, :seed=>12345}} # at the moment is hardocoded
		},
		:resources_requirements_cpu=>2,
		:resources_requirements_memory=>1,
		:node_affinity=>"local", # at the moment is hardocoded
		# :mdn_file=>"placeholder!!!", # write the path of your model
		:rps=>100, # at the moment is hardcode (change if is necessary)
	}

services \
	'my_solver' =>	{
		serviceName: 'my_solver',
		selector: 'my_solver' # the selector name is the same of the service name
	},
	'georef_module' =>	{
		serviceName: 'georef_module',
		selector: 'georef_module' # the selector name is the same of the service name
	}

replica_sets \
	'app1' => {
		name: 'app1',
		selector: 'my_solver',
		replicas: 157, # is randomly generated
	},
	'app2' => {
		name: 'app2',
		selector: 'georef_module',
		replicas: 151, # is randomly generated
	}

workflow_types \
	1 => {
		component_sequence: [
			{ name: "georef_module" },
		],
	},
	2 => {
		component_sequence: [
			{ name: "georef_module, sert" },
			{ name: "my_solver" },
		],
	}

evaluation \
  cluster_hourly_cost: [
    { cluster: :one, fixed_cpu_hourly_cost: 0.100, fixed_memory_hourly_cost: 0.100 },
    { cluster: :two, fixed_cpu_hourly_cost: 0.300, fixed_memory_hourly_cost: 0.250 },
    { cluster: :three, fixed_cpu_hourly_cost: 0.300, fixed_memory_hourly_cost: 0.315 },
    { cluster: :four, fixed_cpu_hourly_cost: 0.500, fixed_memory_hourly_cost: 0.315 },
    { cluster: :five, fixed_cpu_hourly_cost: 0.500, fixed_memory_hourly_cost: 0.315 },
    { cluster: :six, fixed_cpu_hourly_cost: 0.600, fixed_memory_hourly_cost: 0.315 },
    { cluster: :seven, fixed_cpu_hourly_cost: 0.600, fixed_memory_hourly_cost: 0.315 },
  ],

  penalties: lambda {|general_stats, per_workflow_and_customer_stats|
    # 500$ penalties if MTTR takes more than 50 msecs
    500.0 if general_stats.mean > 0.500
  }
    