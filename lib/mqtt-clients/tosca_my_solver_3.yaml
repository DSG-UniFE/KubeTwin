tosca_definitions_version: tosca_simple_profile_for_torch_1_0_1

repositories:
  docker_hub: https://registry.hub.docker.com/

description: >
  TOSCA simple profile to deploy hello world container on kubernetes as a deployment units.

imports:
  - tosca_additional_types.yaml

topology_template:
  
  inputs:
    my_cool_port:
      type: integer
      description: The coolest port ever
      default: 4242
    
  node_templates:
    my_solver:
      type: torch.nodes.ApplicationService.WebApplication
      properties:
        required_num_cpus: 1
        required_mem: 1 GB
      requirements:
        - service: georef_module
      capabilities:
        app_endpoint:
          properties:
            port: { get_input: my_cool_port }
            url_path: "/georef-module"
            network_name: PUBLIC
      artifacts:
        container_image:
          file: edrudi97/helloworld-server:v1.0.2
          type: tosca.artifacts.Deployment.Image.Container.Docker
          repository: docker_hub
      interfaces:
        Standard:
          create:
            implementation: container_image
            inputs:
              port: { get_property: [ SELF, app_endpoint, port ] }
              hello_string: "hello World!"
    georef_module:
      type: torch.nodes.ApplicationService.ORModule
      properties:
        required_num_cpus: 2
        required_mem: 1 GB
      capabilities:
        app_endpoint:
          properties:
            port: 8080
            url_path: "/api/v1/georef"
      artifacts:
        container_image:
          file: user/image_name:latest
          type: tosca.artifacts.Deployment.Image.Container.Docker
          repository: docker_hub
      interfaces:
        Standard:
          create:
            implementation: container_image     
    cluster1:
      type: torch.nodes.Location.Cluster
      properties:
        platform: kubernetes  #swarm,...
        provider: manual      #kubeadm,openstack,azure,... manual = no need to create the cluster
        api-endpoint: "https://my-kubernetes-cluster:6443"
        api-version: "1.28"
        ca:
          crt: "ca.crt"
        private_key: "torch.key"
        user_crt: "torch-signed.crt"
      capabilities:
        host:
          properties:
            num_nodes: 50
            num_cpus: 4
            cpu_frequency: 3 GHz
            disk_size: 100 GB
            mem_size: 12 GB
    cluster2:
      type: torch.nodes.Location.Cluster
      properties:
        platform: kubernetes  #swarm,...
        provider: manual      #kubeadm,openstack,azure,... manual = no need to create the cluster
        api-endpoint: "https://my-kubernetes-cluster2:6443"
        api-version: "1.28"
        ca:
          crt: "ca2.crt"
        private_key: "torch2.key"
        user_crt: "torch-signed2.crt"
      capabilities:
        host:
          properties:
            num_nodes: 50
            num_cpus: 8
            cpu_frequency: 3.5 GHz
            disk_size: 200 GB
            mem_size: 16 GB
